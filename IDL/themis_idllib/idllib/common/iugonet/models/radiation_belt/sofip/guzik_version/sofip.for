C **********************************************************************
C ************    SHORT ORBITAL FLUX INTEGRATION PROGRAM     ***********
C *******    FOR USE WITH NSSDC'S STANDARD ENVIRONMENT MODELS    *******
C **********************************************************************
C ** DESIGNED AND TESTED BY STASSINOPOULOS, HEBERT, BUTLER, & BARTH   **
C ** CODE 601, NASA/GODDARD SPACE FLIGHT CENTER; GREENBELT, MD. 20771 **
C ** SINGLE PRECISION DECK FOR FORTRAN IV   (EBCDIC,029 PUNCH)        **
C ** TRAJECTORY INPUT FROM UNFORMATTED BINARY OR BCD FORMATTED TAPE   **
C **********************************************************************
C ***
C ***  INPUT PARAMETERS:
C ***  * NAME  : 12-CHARACTER MISSION (OR PROJECT) NAME
C ***  * INCL  : APPROXIMATE INCLINATION OF ORBIT PLANE IN DEGREES (I*4)
C ***  * IPRG  : APPROXIMATE PERIGEE ALTITUDE IN KILOMETERS        (I*4)
C ***  * IAPG  : APPROXIMATE APOGEE ALTITUDE IN KILOMETERS         (I*4)
C ***  * MODEL : NUMBER OF FIELD-MODEL USED IN B/L CALCULATION     (R*4)
C ***  * PERIOD: MATHEMATICAL PERIOD OF ORBIT IN HOURS             (R*4)
C ***  * BLTIME: EPOCH OF FIELD-MODEL USED IN B/L CALCULATION      (R*4)
C ***  * NRGYLV: THRESHOLD-ENERGY SELECTOR FOR RUNNING PRINTOUT    (I*4)
C ***  * ITAPE : B/L ORBIT TAPE IDENTIFIER, < 10000                (I*4)
C ***  * NTABLS: # OF OUTPUT-TABLE SETS PER TRAJECTORY             (I*4)
C ***  * CUTOFF: ORBIT DURATION IN DECIMAL HOURS                   (R*4)
C ***  * ISKIP : POSITION SKIPPING CONTROL                         (I*4)
C ***  * KPRINT: RUNNING PRINTOUT CONTROL                          (I*4)
C ***
C ***  INPUT VARIABLES:
C ***  * PSNTIM:  POSITIONAL TIME (DECIMAL HOURS)
C ***  * PSNLON:      "      LONGITUDE (DEGREES)
C ***  * PSNLAT:      "      LATITUDE (DEGREES)
C ***  * PSNALT:      "      ALTITUDE (KILOMETERS)
C ***  * PSNB  :      "      FIELD MAGNITUDE (GAUSS)
C ***  * PSNL  :      "      SHELL PARAMETER (EARTH RADII)
C **********************************************************************
C *** TO READ BCD FORMATTED ORBIT TAPES, UNCOMMENT LINES 132,137,& 143.
C *** COMMENT OUT LINES 133-134,138-139,& 144.
C *** TO READ UNFORMATTED BINARY ORBIT TAPES, UNCOMMENT LINES 133-134,
C *** 138-139,& 144.  COMMENT OUT LINES 132,137,& 143.
C *** ********************  BLOCK 0: INITIALIZATION  *******************
      COMMON /AP8MAC/DESCR(8),LIST(1)
C     COMMON /AE6MAX/DESCR(8),LIST(1)
C     COMMON /AEI7HI/DESCR7(8),LIST7(1)
C     COMMON /AEI7LO/DESCR7(8),LIST7(1)
C     COMMON /AE5MIN/DESCR(8),LIST(1)
C     COMMON /AP8MIC/DESCR(8),LIST(1)
      REAL MODLAB*8(4,7)/'HENDRICK','S&CAIN 9','9-TERM G','SFC 9/65',' C
     $AIN ET','.AL. 120','-TERM GS','FC 12/66',' CAIN&LA','NGEL 143','-T
     $ERM PO','GO 10/68',' CAIN&SW','EENEY 12','0-TERM P','OGO 8/69','
     $  IGRF',' 1965.0 ','80-TERM ','10/68   ',' LEATON ','MALIN EV','AN
     $S 80-T','ERM 1965','   HURWI','TZ US C&','GS 168-T','ERM 1970'/,
     $MODLBL*8(4),AP8/' AP8'/,MAX/'MAX '/,MIN/'MIN '/,LOW/'S LO'/,
C    $MAC/'MAC'/,BINDMY*8(5),ADUMMY(6),MOD7/'LO-7'/
     $MAC/'MAC'/,DESCR7(8),BINDMY*8(5),ADUMMY(6),MOD7/'LO-7'/
      REAL ENERGY(31,2)/2.,3.,4.,5.,6.,8.,10.,15.,20.,25.,30.,35.,40.,
     $45.,50.,55.,60.,70.,80.,90.,100.,125.,150.,175.,200.,250.,300.,
     $350.,400.,500.,0.,.1,.2,.3,.4,.5,.6,.7,.8,.9,1.,1.25,1.5,1.75,2.,
     $2.25,2.5,2.75,3.,3.25,3.5,3.75,4.,4.25,4.5,4.75,5.,5.5,6.,6.5,7.,
     $0.0/,SPNRG(20)/10.,20.,30.,40.,50.,60.,70.,80.,90.,100.,110.,120.,
     $130.,140.,150.,160.,170.,180.,190.,200./
      INTEGER NRGRNG(10,2)/1,3,5,7,12,20,22,26,30,31,1,5,8,10,12,13,14,
     $22,30,31/,IZONE(120)/10*1,17*2,93*3/,NRBITO/1/
      DIMENSION FLUXES(30),ALGFLX(30),ALNFLX(30),DIFSPC(30),EXPFLX(10),
     $PKVALU(50,8),AIFLXS(30),ENRNGS(11),EXPTIM(10),IYMD(3),LCOUNT(4),
     $DIFFLX(30),NAME(3),PKFLX(50),PKTIM(50),PTIME(4),
     $PKLON(50),PKLAT(50),PKALT(50),PKB(50),PKL(50),TAUFLX(50),F(20)
      EQUIVALENCE(PKVALU(1,1),PKFLX(1)),(PKVALU(1,2),PKLON(1)),(PKVALU(1
     $,3),PKLAT(1)),(PKVALU(1,4),PKALT(1)),(PKVALU(1,5),PKTIM(1)),(PKVAL
     $U(1,6),PKB(1)),(PKVALU(1,7),PKL(1)),(PKVALU(1,8),TAUFLX(1))
      REAL TYPLBL(3,2)/'  PR','OTON','S   ','ELEC','TRON','S HI'/,
     $FIRNGS(11)/'0.E0','1.E0','1.E1','1.E2','1.E3','1.E4','1.E5',
     $'1.E6','1.E7','OVER',' '/,XLABEL*8(3,2)/'PRNRGY','PRINTG','PRDIFF'
     $,'ELNRGY','ELINTG','ELDIFF'/,PROTLB*8(2)/'SPNRGY','SPFLUX'/
    1 FORMAT('1NAME  = ',3A4/' INCL  = ',I3/' IPRG  = ', I6/' IAPG = ',
     $I6/' ITAPE = ',I4/' MODEL = ',I2/' PERIOD= ',F9.6/
     $' BLTIME= ',F7.2/' NRGLEV= ',I2/' NTABLS= ',I2/' CUTOFF= ',F6.2/
     $' ISKIP= ',I2/' KPRINT= ',I2//)
    2 FORMAT('1',131('*')/' * SOFIP : SHORT ORBITAL FLUX INTEGR. PROGRAM
     $ FOR STANDARD NSSDC PROTON AND ELECTRON ENVIR. MODELS (SPECIES CON
     $SIDERED SEPARATELY) *'/' * MAGNETIC PARAMETERS B AND L COMPUTED WI
     $TH GEOMAGN. FIELD MODEL',I3,': ',4A8,' * COEFF. UPDATED TO:',F7.1,
     $' *'/' * PROJECT :',3A4,' * INCLIN=',I3,'DEG * PERIG=',I5,'KM * AP
     $OG=',I6,'KM * B/L TAPE=TD',I4,' * PERIOD=',F7.3,'HRS * SOLAR ',A3,
     $'IMUM     *'/' * FOR INFORMATION OR EXPLANATION CONTACT E.G. STASS
     $INOPOULOS AT NASA-GSFC,CODE 601, GREENBELT, MARYLAND 20771, TEL.(3
     $01)-344-8067 *'/1X,131('*')//)
    3 FORMAT(2('1'/12('0'/)/53X,28('*')/53X,'**',6X,3A4,6X,'**'/53X,'**'
     $,I3,'DEG/',I5,'KM/',I6,'KM **'/53X,28('*')/))
    4 FORMAT (3A4,7X,I3,7X,I6,4X,I6,4X,I2,8X,F9.6,1X,F7.2/I2,7X,I4,
     $6X,I2,8X,F6.2,4X,I2,8X,I2)
    5 FORMAT(6E18.8)
C *** ********************  BLOCK 1: INITIALIZATION  *******************
   10 READ(5,4,END=999) NAME,INCL,IPRG,IAPG,MODEL,PERIOD,BLTIME,NRGYLV,
     $ITAPE,NTABLS,CUTOFF,ISKIP,KPRINT
      ITYPE=1
      WRITE(6,3) (NAME,INCL,IPRG,IAPG,I=1,2)
      NORBIT=1
      IPASS=1
      IPRINT=KPRINT
      ASSIGN 110 TO NGO2
      L=0
      LSUM=0
      EXPFCT=0.0
      XAMNIM=MAX
      ISWTCH=1
      IF(DESCR(1).EQ.AP8) GO TO 15
      ITYPE = 2
      ASSIGN 120 TO NGO2
      IF(DESCR(2).NE.MAX) XAMNIM=MIN
      IF(DESCR7(2).EQ.MOD7) TYPLBL(3,2)=LOW
      GO TO 17
   15 IF(DESCR(2).NE.MAC)  XAMNIM=MIN
   17 DO 20 I=1,4
      LCOUNT(I)=0
   20 MODLBL(I) = MODLAB(I,MODEL)
      TAU = PERIOD
      FLXSUM = 0.0
      OFLXSM = 0.0
      PEAK = -1.0
      DO 30 NRNG=1,10
      ENRNGS(NRNG) = ENERGY(NRGRNG(NRNG,ITYPE),ITYPE)
      EXPTIM(NRNG) = 0.0
   30 EXPFLX(NRNG) = 0.0
      DO 35 NRGSP=1,20
   35 F(NRGSP)=0.0
      DO 40 NRG=1,30
      AIFLXS(NRG)=0.0
      ALNFLX(NRG) = 0.0
      DIFSPC(NRG) = 0.0
   40 FLUXES(NRG) = 0.0
C *** WRITE OUT INPUT PARAMETERS
      WRITE(6,1)NAME,INCL,IPRG,IAPG,ITAPE,MODEL,PERIOD,BLTIME,NRGYLV,
     $NTABLS,CUTOFF,ISKIP,KPRINT
C *** ************************  BLOCK 2: INPUT  ************************
      READ(9,5,END=400,ERR=10)PSNTM1,PSNLN1,PSNLT1,PSNAL1,PSNB1,PSNL1
C     READ(9,END=400,ERR=10)PSNTM1,PSNLN1,DUMMY,PSNLT1,DUMMY,PSNAL1,
C    $DUMMY,PSNB1,DUMMY,PSNL1,DUMMY
      TMLAST = PSNTM1
   50 DO 60 ISKP=1,ISKIP
      READ(9,5,END=400,ERR=10) PSNTIM,PSNLON,PSNLAT,PSNALT,PSNB,PSNL
C     READ(9,END=400,ERR=10)PSNTIM,PSNLON,DUMMY,PSNLAT,DUMMY,PSNALT,
C    $DUMMY,PSNB,DUMMY,PSNL,DUMMY
   60 CONTINUE
      IF(PSNTIM.LE.CUTOFF) GO TO 65
C *** DUMMY READ LOOP TO READ TO END OF FILE
   66 READ(9,5,END=400,ERR=10) ADUMMY
C  66 READ(9,END=400,ERR=10) BINTIM,BINDMY
      GO TO 66
   65 CONTINUE
C *** *********************  BLOCK 3: CALCULATIONS  ********************
C *** CALCULATE KPSTEP (NUMBER OF MINUTES BETWEEN POINTS ON B/L TAPE)
      GO TO (70,80), IPASS
   70 KPSTEP = INT((PSNTIM-TMLAST)/.0166667+0.1)
   80 TMLAST = PSNTIM
C *** TEST L-VALUE  & BYPASS FLUX CALCULATIONS IF WARRANTED
      IF(PSNL.GT.0.0.AND.PSNL.LT.12.0) GO TO NGO2,(110,120)
      DO 100 NRG=1,30
  100 FLUXES(NRG) = 0.0
      GO TO 170
C *** OBTAIN COMMON LOGARITHM OF POSITIONAL FLUXES (ALGFLX)
C *** PROTONS
  110 CALL TRARA1(DESCR,LIST,PSNL,PSNB,ENERGY(1,1),ALGFLX(1),30)
      GO TO 140
C *** ELECTRONS
  120 IF(INT(100.0*PSNL+0.2).LE.280) GO TO 130
      CALL TRARA1(DESCR7,LIST7,PSNL,PSNB,ENERGY(1,2),ALGFLX(1),30)
      GO TO 140
  130 CALL TRARA1(DESCR,LIST,  PSNL,PSNB,ENERGY(1,2),ALGFLX(1),30)
C *** CONVERT LOG-FLUX TO FLUX
  140 DO 150 NRG=1,30
      FLUXES(NRG) = 10.0**ALGFLX(NRG)
  150 IF(FLUXES(NRG).LT.1.001) FLUXES(NRG) = 0.0
C *** SUM FLUXES FOR (A) RUNNING PRINTOUT, (B) TABULAR OUTPUT
      FLXSUM = FLXSUM+FLUXES(NRGYLV)*FLOAT(KPSTEP)*60.
      DO 160 NRG=1,30
  160 AIFLXS(NRG) = AIFLXS(NRG)+FLUXES(NRG)
  170 CONTINUE
C *** ********************  RUNNING PRINTOUT MODULE  *******************
      GO TO (200,210),IPASS
  200 WRITE (6,2) MODEL,MODLBL,BLTIME,NAME,INCL,IPRG,IAPG,ITAPE,PERIOD,
     $XAMNIM
      WRITE (6,201)(TYPLBL(I,ITYPE),I=1,3), ENERGY(NRGYLV,ITYPE)
  201 FORMAT('0',21X,'***** ',3A4,'(E>',G9.3,'MEV)   *****'//    '  LONG
     $.    LAT.    ALT.   FIELD    LINE   ORBIT    POSITIONAL  TIME-INTE
     $G    ORBITAL'/' ',T28,'-B-',T37,'-L-    TIME       FLUX     PSTNL
     $FLUX   FLUX(SUM)'/'  (DEG)    (DEG)   (KM)  (GAUSS)  (E.R.)  (HRS)
     $   #/CM**2/SEC')
      WRITE(6,202)PSNTM1,PSNLN1,PSNLT1,PSNAL1,PSNB1,PSNL1
  202 FORMAT(' ',T41,F9.5,T2,F7.2,1X,F6.2,1X,F8.1,1X,F8.5,1X,F5.2,T50,
     $7(2X,1PE10.3))
  210 IF(MOD(IPRINT,KPRINT).NE.0) GO TO 220
      TIFLUX = FLUXES(NRGYLV)*FLOAT(KPSTEP)*60.
      WRITE(6,202)PSNTIM,PSNLON,PSNLAT,PSNALT,PSNB,PSNL,
     $FLUXES(NRGYLV),TIFLUX,FLXSUM
  220 IPRINT=IPRINT+1
C *** *****************  ORBIT L-ZONE BREAKDOWN MODULE  ****************
C *** *******  THIS MODULE MUST BE USED WITH PERCENT TIME MODULE  ******
C *** STORE TIME IN INNER & OUTER ZONE, EXTERNAL
      IF(PSNL.LT.0.0.OR.PSNL.GT.11.0) GO TO 250
      IZ = IZONE(INT(PSNL/.1))
      LCOUNT(IZ) = LCOUNT(IZ) + 1
      GO TO 260
  250 LCOUNT(4) = LCOUNT(4)+1
  260 CONTINUE
C *** *********************  EXPOSURE INDEX MODULE  ********************
C *** STORE FLUXES AND TIMES IN INTENSITY RANGES
      GO TO(270,280),IPASS
  270 ISWTCH=ISWTCH+1
  280 INTRNG = (8-INT(1.0-SIGN(0.5,ALGFLX(NRGYLV)-7.0)) *
     $(7-INT(ALGFLX(NRGYLV)))) * INT(1.0+SIGN(0.5,
     $FLUXES(NRGYLV)-1.0009))+1
      EXPFLX(INTRNG)=EXPFLX(INTRNG)+FLUXES(NRGYLV)*60.0*FLOAT(
     $KPSTEP)
      EXPFLX(10)=EXPFLX(10)+FLUXES(NRGYLV)*60.0*FLOAT(KPSTEP)
      EXPTIM(INTRNG) = EXPTIM(INTRNG) + FLOAT(KPSTEP) * .0166667
      EXPTIM(10) = EXPTIM(10) + FLOAT(KPSTEP) * .0166667
C *** ***************  PEAK AND TOTALS PER ORBIT MODULE  ***************
C *** DETERMINE ORBIT NUMBER AND TOTAL FLUXES PER ORBIT
      IF(PSNTIM.LT.TAU) GO TO 300
      PEAK = -1.0
      TAUFLX(NORBIT) = FLXSUM-OFLXSM
      OFLXSM = FLXSUM
      NRBITO=NORBIT
      NORBIT = NORBIT+1
      TAU = NORBIT * PERIOD
      IF(NORBIT.LE.50) GO TO 300
      WRITE(6,301)
  301 FORMAT('0ERROR: NORBIT EXCEEDS LIMIT OF 50.  ************')
      STOP
C *** DETERMINE FLUX PEAKS AND POSITIONS PER ORBIT
  300 IF(FLUXES(NRGYLV).LE.PEAK) GO TO 310
      PKFLX(NORBIT) = FLUXES(NRGYLV)
      PKTIM(NORBIT) = PSNTIM
      PKLON(NORBIT) = PSNLON
      PKLAT(NORBIT) = PSNLAT
      PKALT(NORBIT) = PSNALT
      PKB(NORBIT) = PSNB
      PKL(NORBIT) = PSNL
      PEAK = FLUXES(NRGYLV)
  310 CONTINUE
C *** *****************  GEOMAGNETIC SHIELDING MODULE  *****************
C *** *******  THIS MODULE MUST BE USED WITH SOLAR PROTON MODULE  ******
      IF(INT(PSNL).GE.5.OR.PSNL.LE.0.0) L=L+1
C *** ************  BLOCK 4: LOOPING  (READ-LOOP ENDS HERE)  ***********
      IPASS=2
      GO TO 50
C *** ******************  BLOCK 5: OUTPUT PREPARATION  *****************
C *** COMPOSITE ORBIT SPECTRUM
  400 AFCTRS = (KPSTEP*1440.0) / (PSNTIM*86400.0)
      DO 410 NRG=1,30
      AIFLXS(NRG) = AIFLXS(NRG)*AFCTRS
      IF(AIFLXS(NRG).LE.0.0) GO TO 440
      ALNFLX(NRG) = ALOG(AIFLXS(NRG))
  410 CONTINUE
  440 DO 450 NRG=1,29
  450 DIFFLX(NRG) = AIFLXS(NRG)-AIFLXS(NRG+1)
      DIFFLX(30) = AIFLXS(30)
C *** **********************  PERCENT TIME MODULE  *********************
C *** **  THIS MODULE MUST BE USED WITH ORBIT L-ZONE BREAKDOWN MODULE  *
C *** CALCULATE AND PRINT PERCENT TIME TABLE
      LSUM=LCOUNT(1) + LCOUNT(2) + LCOUNT(3) + LCOUNT(4)
      IF(LSUM.EQ.0) GO TO 470
      DO 460 IL=1,4
  460 PTIME(IL)=FLOAT(LCOUNT(IL)*KPSTEP)*1.66667/TMLAST
      PTIZ=PTIME(1)+PTIME(2)
      WRITE(6,401)PTIZ,(PTIME(II),II=1,4),PSNTIM
  470 CONTINUE
  401 FORMAT('0***** PERCENT OF TOTAL LIFETIME SPENT INSIDE AND OUTSIDE
     $TRAPPED PARTICLE RADIATION BELT ****'//6X,'INNER ZONE (1.0 <= L <
     $2.8)  : ',F6.2,' %'/18X,'OUTSIDE TRAPPING REGION (1.0 <= L < 1.1)
     $: ',F6.2,' %'/18X,'INSIDE TRAPPING REGION  (1.1 <= L < 2.8) : ',
     $F6.2,' %'/6X,'OUTER ZONE (2.8 <= L <= 11.0) : ',F6.2,' %'/6X,'EXTE
     $RNAL   (L > 11.0)         : ',F6.2,' %'//' TOTAL ORBIT TIME IS :',
     $F8.2,' HOURS')
C *** *****************  DIFFERENTIAL SPECTRUM MODULE  *****************
      CALL DSPCTR(ALNFLX(1),ENERGY(1,ITYPE),DIFSPC(1))
C *** **********************  SOLAR PROTON MODULE  *********************
C *** ****  THIS MODULE MUST BE USED WITH GEOMAG. SHIELDING MODULE  ****
      T=12.
      IT=T
      IQ=90
      ISWTCH=ISWTCH+2
      IF(L.LE.0) GO TO 510
      CALL SOLPRO(T,IQ,F,INALE)
      EXPOTM=FLOAT(L*KPSTEP)*.0166667
      EXPFCT=(EXPOTM/PSNTIM)
      DO 500 J=1,20
      F(J)=F(J)*EXPFCT
  500 CONTINUE
  510 CONTINUE
C *** **********************  OUTPUT PUNCH MODULE  *********************
C *** PUNCHES ENERGY, INTEG AND DIFF FLUX, SOLAR PROTONS IF PRESENT
      WRITE(7,605) NAME,INCL,IPRG,IAPG,MODEL,BLTIME
      WRITE(7,602)((ENERGY((II-1)*6+JJ,ITYPE),JJ=1,6),XLABEL(1,ITYPE),II
     $,II=1,5)
      WRITE(7,602)((AIFLXS((II-1)*6+JJ),JJ=1,6),XLABEL(2,ITYPE),II,II=1,
     $5)
      WRITE(7,602)((DIFSPC((II-1)*6+JJ),JJ=1,6),XLABEL(3,ITYPE),II,II=1,
     $5)
      IF(L.LE.0) GO TO 600
      WRITE(7,603) IQ,T,INALE,EXPFCT
      WRITE(7,604)((SPNRG((II-1)*5+JJ),JJ=1,5),PROTLB(1),II,II=1,4)
      WRITE(7,604)((F((II-1)*5+JJ),JJ=1,5),PROTLB(2),II,II=1,4)
  600 CONTINUE
  602 FORMAT(1P6E12.4,A6,I2)
  603 FORMAT('SOLAR PROTONS  #ENERGIES=20   Q=',I2,'  TAU=',F4.1,
     $'  NALE=',I1,'  EXPFCTR=',F5.2)
  604 FORMAT(1P5E12.4,12X,A6,I2)
  605 FORMAT(3A4,1X,I2,'/',I5,'-',I6,1X,'I(#/CM**2-SEC) D(#/CM**2-SEC-KE
     $V) MOD/TM=',I1,'/',F6.1)
C *** ********************  OUTPUT TABLES MODULE 1  ********************
      DO 900 NTBL=1,NTABLS
      WRITE(6,2) MODEL,MODLBL,BLTIME,NAME,INCL,IPRG,IAPG,ITAPE,PERIOD,
     $XAMNIM
      GO TO (710,700,730,720),ISWTCH
C *** COMPOSITE ORBIT SPECTRUM AND EXPOSURE INDEX
  700 WRITE (6,701) (TYPLBL(K,ITYPE),K=1,3),ENERGY(NRGYLV,ITYPE),
     $(ENERGY(N,ITYPE),AIFLXS(N),DIFFLX(N),DIFSPC(N),FIRNGS(N),
     $FIRNGS(N+1),EXPTIM(N),EXPFLX(N),N=1,10),(ENERGY(N,ITYPE),AIFLXS(N)
     $,DIFFLX(N),DIFSPC(N),N=11,30)
  701 FORMAT ('+',41X,16('*'),3X,3A4,2X,16('*')/' ',41X,49('*')////'0',
     $T18,15('*'),' COMPOSITE ORBIT SPECTRUM ',15('*'),T80,'** EXPOSURE
     $INDEX:ENERGY>',G9.2,T112,'MEV **'/'0',T18,'ENERGY     AVERAGED
     $   DIFFERENCE     AVERAGED DIFFE-       INTENSITY    EXPOSURE   TO
     $TAL # OF'/' ',T18,'LEVELS   INTEGRAL FLUX   INTEGRAL FLUX    RENTI
     $AL FLUX',10X,'RANGES      DURATION   ACCUMULATED'/' ',T18,'>(MEV)
     $  #/CM**2/SEC     #/CM**2/SEC/DE  #/CM**2/SEC/KEV      #/CM**2/SEC
     $   (HOURS)     PARTICLES'/'0',T18,0PG9.4,T23,'    ',1PE9.3,7X,
     $1PE9.3,8X,1PE9.3,T81,2A4,T81,'ZERO FLUX',1X,0PF10.3,1X,1PE13.3/8('
     $ ',T18,0PG9.4,1PE9.3,7X,1PE9.3,8X,1PE9.3,T81,A4,'-',A4,1X,0PF10.3,
     $1X,1PE13.3/),' ',T18,0PG9.4,1PE9.3,7X,1PE9.3,8X,1PE9.3/' ',T81,2A4
     $,T81,'    TOTAL',1X,0PF10.3,1X,1PE13.3,20(T18,0PG9.4,1PE9.3,7X,
     $1PE9.3,8X,1PE9.3/' '))
      GO TO 750
C *** COMPOSITE ORBIT SPECTRUM ONLY
  710 WRITE (6,702) (TYPLBL(K,ITYPE),K=1,3),(ENERGY(N,ITYPE),AIFLXS(N),
     $DIFFLX(N),DIFSPC(N),N=1,30)
  702 FORMAT ('+',41X,16('*'),3X,3A4,2X,16('*')/' ',41X,49('*')////'0',
     $T40,15('*'),' COMPOSITE ORBIT SPECTRUM ',15('*')/'0',T40,'ENERGY
     $   AVERAGED     DIFFERENCE       AVERAGED DIFFE-'/' ',T40,'LEVELS
     $  INTEGRAL FLUX  INTEGRAL FLUX     RENTIAL FLUX'/' ',T40,'>(MEV)
     $  #/CM**2/SEC  #/CM**2/SEC/DE    #/CM**2/SEC/KEV'//30(' ',T41,
     $0PG9.4,T46,'    ',1PE9.3,6X,1PE9.3,8X,1PE9.3/))
      GO TO 750
C *** COMPOSITE ORBIT SPECTRUM WITH SOLAR PROTONS AND EXPOSURE INDEX
  720 WRITE(6,703)(TYPLBL(K,ITYPE),K=1,3),IT,IQ,INALE,ENERGY(NRGYLV,
     $ITYPE),EXPFCT,(ENERGY(N,ITYPE),AIFLXS(N),DIFFLX(N),DIFSPC(N),SPNRG
     $(N),F(N),FIRNGS(N),FIRNGS(N+1),EXPTIM(N),EXPFLX(N),N=1,10),(ENERGY
     $(N,ITYPE),AIFLXS(N),DIFFLX(N),DIFSPC(N),SPNRG(N),F(N),N=11,20),
     $(ENERGY(N,ITYPE),AIFLXS(N),DIFFLX(N),DIFSPC(N),N=21,30)
  703 FORMAT('+',41X,16('*'),3X,3A4,2X,16('*')/' ',41X,49('*')////'0',
     $62X,'**** SOLAR PROTONS ****'//63X,'FOR TAU=',I2,',Q=',I2,': NALE=
     $',I1/3X,15('*'),' COMPOSITE ORBIT SPECTRUM ',15('*'),5X,'WITH GEOM
     $AG SHIELDING',8X,'** EXPOSURE INDEX: ENERGY>',G9.4,T125,' MEV **'/
     $64X,'(EXPOSR FACTOR=',F4.2,')'//3X,'ENERGY     AVERAGED       DIFF
     $ERENCE     AVERAGED DIFF-       ENERGY       TOTAL           INTEN
     $SITY    EXPOSURE   TOTAL # OF'/3X,'LEVELS   INTEGRAL FLUX  INTEGRA
     $L FLUX    RENTIAL FLUX         LEVELS      FLUENCE           RANGE
     $S      DURATION   ACCUMULATED'/3X,'>(MEV)    #/CM**2/SEC  #/CM**2/
     $SEC/DE   #/CM**2/SEC/KEV       >(MEV)      #/CM**2         #/CM**2
     $/SEC   (HOURS)     PARTICLES'//T4,0PG9.4,T9,'      ',1PE9.3,6X,
     $1PE9.3,7X,1PE9.3,11X,0PF4.0,7X,1PE9.3,T95,2A4,T95,'ZERO FLUX',
     $0PF11.3,1PE14.3/8(T4,0PG9.4,T9,'      ',1PE9.3,6X,1PE9.3,7X,1PE9.3
     $,11X,0PF4.0,7X,1PE9.3,9X,A4,'-',A4,0PF11.3,1PE14.3/),T4,0PG9.4,T9,
     $'      ',1PE9.3,6X,1PE9.3,7X,1PE9.3,11X,0PF4.0,7X,1PE9.3,T95,2A4,
     $T95,'    TOTAL',0PF11.3,1PE14.3/10(T4,0PG9.4,T9,'      ',1PE9.3,6X
     $,1PE9.3,7X,1PE9.3,11X,0PF4.0,7X,1PE9.3/),10(T4,0PG9.4,T9,'      ',
     $1PE9.3,6X,1PE9.3,7X,1PE9.3/))
      GO TO 750
C *** COMPOSITE ORBIT SPECTRUM WITH SOLAR PROTONS
  730 WRITE(6,704)(TYPLBL(K,ITYPE),K=1,3),IT,IQ,INALE,EXPFCT,(ENERGY(N,
     $ITYPE),AIFLXS(N),DIFFLX(N),DIFSPC(N),SPNRG(N),F(N),N=1,20),
     $(ENERGY(N,ITYPE),AIFLXS(N),DIFFLX(N),DIFSPC(N),N=21,30)
  704 FORMAT('+',41X,16('*'),3X,3A4,2X,16('*')/' ',41X,49('*')////T93,
     $'**** SOLAR PROTONS ****'//T93,'FOR TAU=',I2,',Q=',I2,': NALE=',
     $I1/19X,15('*'),' COMPOSITE ORBIT SPECTRUM ',15('*'),18X,'WITH GEOM
     $AG SHIELDING'/T94,'(EXPOSR FACTOR=',F4.2,')'//19X,'ENERGY     AVER
     $AGED       DIFFERENCE     AVERAGED DIFF-',20X,'ENERGY       TOTAL'
     $/19X,'LEVELS   INTEGRAL FLUX  INTEGRAL FLUX    RENTIAL FLUX',22X,
     $'LEVELS      FLUENCE'/19X,'>(MEV)    #/CM**2/SEC  #/CM**2/SEC/DE
     $ #/CM**2/SEC/KEV',20X,'>(MEV)      #/CM**2'//20(T20,0PG9.4,T25,'
     $    ',1PE9.3,6X,1PE9.3,7X,1PE9.3,24X,0PF4.0,7X,1PE9.3/),10(T20,
     $0PG9.4,T25,'      ',1PE9.3,6X,1PE9.3,7X,1PE9.3/))
  750 CONTINUE
C *** ********************  OUTPUT TABLES MODULE 2  ********************
C *** PEAK AND TOTAL FLUXES PER PERIOD
      WRITE(6,2) MODEL,MODLBL,BLTIME,NAME,INCL,IPRG,IAPG,ITAPE,PERIOD,
     $XAMNIM
      WRITE(6,801)(TYPLBL(K,ITYPE),K=1,3),ENERGY(NRGYLV,ITYPE),
     $(N,(PKVALU(N,K),K=1,8),N=1,NRBITO)
  801 FORMAT(                '+',T35,24('*'),3X,3A4,2X,27('*')/' ',T35,
     $'** TABLE OF PEAK AND TOTAL FLUXES PER PERIOD : ENERGY >',G9.2,T97
     $,   'MEV **'/' ',T35,68('*')//'0',13X,'PERIOD    PEAK FLUX      PO
     $SITION AT WHICH ENCOUNTERED    ORBIT TIME    FIELD(B)    LINE(L)
     $  TOTAL FLUX'/' ',13X,'NUMBER    ENCOUNTERED    LONGITUDE  LATITUD
     $E  ALTITUDE',41X,'PER ORBIT'/  ' ',23X,'#/CM**2/SEC ',2(5X,'(DEG)'
     $),6X,'(KM)',7X,'(HOURS)',6X,'(GAUSS)     (E.R.)     #/CM**2/ORBIT'
     $//(' ',14X,I4,1PE14.3,0PF13.3,F10.2,F12.2,F13.5,F12.5,F10.2,1PE15.
     $3))
C *** *****************  BLOCK 6: PROGRAM TERMINATION  *****************
  900 CONTINUE
      GO TO 10
  999 STOP
      END
C *** ***************  DIFFERENTIAL SPECTRUM SUBROUTINE  ***************
C *** CALCULATES FIRST DERIVATIVES OF INPUT SPECTRUM DEFINED BY FF VS XX
C *** INPUT:   XX - 30 INTEGRAL THRESHOLD ENERGIES, IN MEV         (R*4)
C ***          FF - ALOG OF THE INTEGRAL FLUXES FOR THE 30 ENERGY  (R*4)
C ***               LEVELS, IN PARTICLES/CM**2/SEC
C *** OUTPUT:  DD - DIFFERENTIAL FLUXES OBTAINED FROM THE INTEGRAL (R*4)
C ***               FLUXES, IN PARTICLES/CM**2/SEC/KEV
C *** ******************************************************************
C *** THIS IS A MODIFIED VERSION OF A PROGRAM (DCS1FU) OBTAINED FROM
C *** IMSL LIBRARY 1:  AUTHOR/IMPLEMENTOR - C.L.SMITH
C *** ******************************************************************
      SUBROUTINE DSPCTR(FF,XX,DD)
      IMPLICIT REAL*8(A-H,O-Z)
      REAL*4 DD,FF,XX
      DIMENSION F(30),X(30),D(30),H(500),FF(30) ,XX(30) ,DD(30)
      DATA EPSLN,OMEGA/1.D-6,1.0717968D0/
C *** DATA INITIALIZATION
      M=0
      DO 5 L=1,30
    5 DD(L)=0.0
C *** DETERMINE SIZE OF ARRAY: OBTAIN M & K INDICES
C ***   M = # OF NONZERO FLUXES - 1;  K = # OF NONZERO FLUXES
      DO 10 K=1,30
      IF(FF(K).EQ.0.)      GO TO 15
      M=K-1
      F(K)=FF(K)+ALOG(1000.)
      X(K)=XX(K)*1000.D0
   10 D(K)=X(K)
   15 K=M+1
      IF(K.LT.10) GO TO 170
C *** SMOOTHING INTEGRAL FLUX
      CALL SMOOTH(X,F,M)
C *** CALCULATE SECOND DERIVATIVES USING CENTRAL DIFFERENCES
      DO 30 I=1,M
         H(I)=X(I+1)-X(I)
   30    H(K +I)=(F(I+1)-F(I))/H(I)
      DO 40  I=2,M
         H(2*K+I)=H(I-1)+H(I)
         H(3*K+I)=.5*H(I-1)/H (2*K+I)
         H(4*K+I)=(H(K+I)-H(K+I-1))/H(2*K+I)
         H(5*K+I)=H(4*K+I)+H(4*K+I)
   40    H(6*K+I)=H(5*K+I)+H(4*K+I)
      H(5*K+1)=0.
      H(6*K)=0.
C *** BEGIN ITERATION ON SECOND DERIVATIVES
      KCOUNT=0
   50 ETA=0.
      KCOUNT=KCOUNT+1
      DO 70  I=2,M
         W=(H(6*K+I)-H(3*K+I)*H(5*K+I-1)-(.5-H(3*K+I))*H(5*K+I+1)-H(5*K+
     $   I)*OMEGA)
         IF (DABS(W).LE.ETA) GO TO 60
         ETA=DABS(W)
   60    H(5*K+I)=H(5*K+I)+W
   70 CONTINUE
      IF(KCOUNT.GT.5*K)GO TO 170
      IF (ETA.GE.EPSLN) GO TO 50
C *** CONVERGENCE OBTAINED
      DO 80 I=1,M
   80    H(7*K+I)=(H(5*K+1+I)-H(5*K+I))/H(I)
      DO 140 J=1,K
         I=1
         IF (D(J).EQ.X(1))GO TO 130
         IF (D(J)-X(K )) 100,110,110
   90    IF (D(J)-X(I)) 120,130,100
  100    I=I+1
         GO TO 90
  110    I=K
  120    I=I-1
C *** COMPUTE D(J)
  130    HT1=D(J)-X(I)
         HT2=D(J)-X(I+1)
         PROD=HT1*HT2
         H(8*K+J)=H(5*K+I)+HT1*H(7*K+I)
         DELSQS=(H(5*K+I)+H(5*K+1+I)+H(8*K+J))/6.
  140    D(J)=-(H(K +I)+(HT1+HT2)*DELSQS+PROD*H(7*K+I)*.1666667)
C *** SMOOTHING DIFFERENTIAL FLUX
      CALL SMOOTH(X,D,M)
      DO 160 I=1,K
      F(I)=2.718281828D0**(F(I)-ALOG(1000.))
  160 DD(I)     =D(I)*F(I)
  170 RETURN
      END
C
C *** SMOOTH DATA BY 3-POINT AVERAGING OVER EQUAL INTERVALS
      SUBROUTINE SMOOTH(X,F,M)
      IMPLICIT REAL*8(A-H,O-Z)
      DIMENSION X(30),F(30)
      FINTER(X1,X2,X3,Y1,Y2,Y3,XIN)=Y1*(XIN-X2)*(XIN-X3)/
     $((X1-X2)*(X1-X3)) + Y2*(XIN-X1)*(XIN-X3)/((X2-X1)*(X2-X3))
     $                  + Y3*(XIN-X1)*(XIN-X2)/((X3-X1)*(X3-X2))
C
      FI = F(1)
      DO 20 I=2,M
        SIZE1 = X(I) - X(I-1)
        SIZE2 = X(I+1) - X(I)
C *** CHECK FOR EQUAL STEPSIZES
        IF(DABS(SIZE1-SIZE2).LT.0.001) GO TO 200
        IF(SIZE2.GT.SIZE1) GO TO 210
C *** STEPSIZE DECREASES - FIT CURVE AND INTERPOLATE BACKWARD
        F2 = F(I+1)
        XINTER = X(I) - SIZE2
        F1 = FINTER(X(I-1),X(I),X(I+1),FI,F(I),F2,XINTER)
        GO TO 300
C *** STEPSIZE INCREASES - FIT CURVE AND INTERPOLATE FORWARD
  210   F1 = FI
        XINTER = X(I) + SIZE1
        F2 = FINTER(X(I-1),X(I),X(I+1),F1,F(I),F(I+1),XINTER)
        GO TO 300
C *** STEPSIZES ARE EQUAL - AVERAGE OVER EXISTING VALUES
  200   F1 = FI
        F2 = F(I+1)
C
C *** PERFORM AVERAGING
  300   FNEW = (F1+2.0*F(I)+F2)/4.
        FI = F(I)
        F(I) = FNEW
   20 CONTINUE
      RETURN
      END
      SUBROUTINE SOLPRO(TAU,IQ,F,INALE)
C *** MODIFIED 9/77 TO RETURN INALE(# OF AL EVENTS) TO CALLING PROGRAM
C *** INTERPLANETARY SOLAR PROTON FLUX AT 1 AU (FROM E>10 TO E>200 MEV
C *** FOR ANOMALOUSLY LARGE (AL) EVENTS AND FROM E>10 TO E>100 MEV FOR
C *** ORDINARY (OR) EVENTS)
C *** SINGLE PRECISION DECK IN STANDARD FORTRAN IV FOR IBM 360 MACHINES
C *** (EBCDIC, 029 PUNCH) OR OTHER COMPATIBLE SYSTEMS.
C *** PROGRAM DESIGNED AND TESTED BY E.G. STASSINOPOULOS, CODE 601,
C *** NASA GODDARD SPACE FLIGHT CENTER, GREENBELT, MARYLAND 20771 .
C *********************************************************************
C ****  INPUT: TAU     MISSION DURATION IN MONTHS (REAL*4)
C ****         IQ      CONFIDENCE LEVEL THAT CALCULATED FLUENCE F(N)
C ****                 WILL NOT BE EXCEEDED (INTEGER*4)
C **** OUTPUT: F(N)    SPECTRUM OF INTEGRAL SOLAR PROTON FLUENCE FOR
C ****                 ENERGIES E>10*N (1=<N=<20) FOR AL EVENTS
C ****                 ENERGIES E>10*N (1=<N=<10) FOR OR EVENTS
C ****         INALE   # OF AL EVENTS FOR GIVEN TAU AND Q
      REAL NALE,NALECF(7,20)/-.1571,.2707,-.1269E-1,.4428E-3,-.8185E-5,
     $.7754E-7,-.2939E-9,-.1870,.1951,-.6559E-2,.1990E-3,-.3618E-5,
     $.3740E-7,-.1599E-9,-.2007,.1497,-.3179E-2,.5730E-4,-.4664E-6,
     $.1764E-8,0.,-.1882,.1228,-.1936E-2,.2660E-4,-.1022E-6,2*0.,
     $-.2214,.1149,-.1871E-2,.2695E-4,-.1116E-6,2*0.,-.2470,.1062,
     $-.1658E-2,.2367E-4,-.9465E-7,2*0.,-.2509,.8710E-1,-.8300E-3,
     $.8438E-5,3*0.,-.2923,.8932E-1,-.1023E-2,.1029E-4,3*0.,-.3222,
     $.8648E-1,-.9992E-3,.9935E-5,3*0.,-.3518,.8417E-1,-.1000E-2,
     $.9956E-5,3*0.,-.3698,.7951E-1,-.8983E-3,.8940E-5,3*0.,-.2771,
     $.5473E-1,-.1543E-4,4*0., -.2818,.5072E-1,.2511E-4,4*0.,-.2845,
     $.4717E-1,.5664E-4,4*0.,-.2947,.4405E-1,.8507E-4,4*0.,-.2923,
     $.4111E-1,.1106E-3,4*0.,-.2981,.3853E-1,.1312E-3,4*0.,-.3002,
     $.3585E-1,.1529E-3,4*0.,-.3001,.3312E-1,.1781E-3,4*0.,-.3141,
     $.3248E-1,.1654E-3,4*0./,F(20),G(20)
      REAL ORFLXC(5,9)/.154047E3,-.522258E4,.714275E5,-.432747E6,.955315
     $E6,.198004E3,-.448788E4,.438148E5,-.196046E6,.32552E6,.529120E3,
     $-.122227E5,.112869E6,-.465084E6,.710572E6,.121141E4,-.266412E5,
     $.226778E6,-.85728E6,.120444E7,.452062E4,-.103248E6,.896085E6,
     $-.346028E7,.499852E7,.272028E4,-.499088E5,.35305E6,-.111929E7,
     $.133386E7,.275597E4,-.469718E5,.314729E6,-.960383E6,.11165E7,
     $.570997E4,-.799689E5,.381074E6,-.610714E6,0.,.101E3,4*0./
      INTEGER INDEX(20)/2*7,6,3*5,5*4,9*3/
    1 FORMAT(' TAU=',F4.0,' IQ=',I3,3X,'PARAMETER(S) EXCEED PROGRAM LIMI
     $TS')
    2 FORMAT(2X,'FOR THE COMBINATION OF TAU AND IQ GIVEN, NO SIGNIFICANT
     $ SOLAR PROTON FLUXES ARE TO BE EXPECTED. TAU=',F6.2,' IQ=',I2)
      IF(TAU.GT.72..OR.IQ.LT.80)GO TO 500
      IP=100-IQ
      M=INDEX(IP)
      NALE=0.
      DO 300 J=1,M
  300 NALE=NALE+NALECF(J,IP)*TAU**(J-1)
      INALE=NALE+1.0001
      IF(INALE.GT.0) GO TO 400
C *** CALCULATIONS FOR OR-EVENT CONDITIONS
      IT=TAU
      IF(IT.EQ.1.AND.IP.GT.16) GO TO 700
      P=FLOAT(IP)/100.
      OF=0.
      DO 100 J=1,5
  100 OF=OF+ORFLXC(J,IT)* P**(J-1)*1.E7
      E=10.
      DO 200 N=1,10
      G(N)=EXP(.0158*(30.-E))
      F(N)=OF*G(N)
  200 E=E+10.
      GO TO 800
C *** CALCULATIONS FOR AL-EVENT CONDITIONS
  400 E=10.
      DO 600 N=1,20
      F(N)=7.9E9*EXP((30.-E)/26.5)*INALE
  600 E=E+10.
      GO TO 800
  700 WRITE(6,2) TAU,IQ
      GO TO 800
  500 WRITE (6,1) TAU,IQ
  800 RETURN
      END
      SUBROUTINE TRARA1(DESCR,MAP,FL,BABS,E,F,N)
C***********************************************************************
C     B / B0 CASE     JOEL STEIN     9-15-71     X2133     KMS
C   TRARA1 DOES ENERGY VALUE SEARCH FOR FLUX CALCULATION WHEN GIVEN A
C    B AND L POINT.
C***********************************************************************
C  MAP(1) IS THE FIRST WORD OF LIST
      LOGICAL S0,S1,S2
C   S0,S1,S2 ARE LOGICAL VARIABLES WHICH INDICATE WHETHER THE FLUX FOR A
C     PARTICULAR E,B,L POINT HAS ALREADY BEEN FOUND IN A PREVIOUS CALL
C     TO TRARA2.
      DIMENSION E(1),F(1),DESCR(8),MAP(1)
      NL=AMIN1(32766.,ABS(FL*DESCR(5)))
      NB =ABS(((BABS*(FL*FL*FL)/0.311653)-1) * DESCR(6))
C     NB=ABS((BABS-0.311653E0/(FL*FL*FL))*DESCR(6))
C   NL IS THE MINIMUM OF THE L VALUE OR 15.999, SCALED TO AN INTEGER BY
C     THE L SCALING FACTOR
C   NB IS THE DIFFERENCE BETWEEN THE INPUT B VALUE AND B EQUATORIAL,
C     SCALED TO AN INTEGER BY THE B SCALING FACTOR.
      I1=0
      I2=MAP(1)
      I3=I2+MAP(I2+1)
      L3=MAP(I3+1)
      E1=MAP(I1+2)/DESCR(4)
      E2=MAP(I2+2)/DESCR(4)
      S1=.TRUE.
      S2=.TRUE.
C
C   I2 IS THE NUMBER OF ELEMENTS IN THE FLUX MAP FOR THE FIRST ENERGY.
C   I3 IS THE INDEX OF THE LAST ELEMENT OF THE SECOND ENERGY MAP.
C   L3 IS THE LENGTH OF THE MAP FOR THE THIRD ENERGY.
C   E1 IS THE ENERGY OF THE FIRST ENERGY MAP (UNSCALED)
C   E2 IS THE ENERGY OF THE SECOND ENERGY MAP (UNSCALED)
C   S1 AND S2 ARE TRUE TO INDICATE THAT NO FLUXES HAVE YET BEEN FOUND.
C
      DO 3 IE=1,N
C   THE DO STATEMENT LOOPS THROUGH THE ENERGIES FOR WHICH FLUXES ARE
C     DESIRED AT THE GIVEN B,L POINT (BABS,FL).
1     IF(E(IE).LE.E2.OR.L3.EQ.0)GOTO2
C
C   THE IF STATEMENT CHECKS TO SEE IF THE INPUT ENERGY IS LESS THAN OR E
C     THE ENERGY OF THE SECOND MAP, OR IF THE LENGTH OF THE THIRD MAP IS
C     (I.E. THERE ARE NO HIGHER ENERGIES IN THE TABLE).  IF TRUE, USE TH
C     FOR THOSE TWO ENERGY MAPS TO FIND THE DESIRED FLUX AT THE DESIRED
C     ENERGY.  IF FALSE, THE ZEROTH ENERGY MAP IS DEFINED TO BE TNE FIRS
C     ENERGY MAP, THE FIRST BECOMES THE SECOND, AND THE SECOND BECOMES
C     THE THIRD.  E0,E1,E2 ARE THE ENERGIES FOR THE ZEROTH,FIRST,AND SEC
C     ENERGY MAPS.  F0,F1,F2 ARE THE FLUXES FOR THE ZEROTH, FIRST, AND
C     SECOND ENERGY MAPS AT THE B,L POINT.
C
      I0=I1
      I1=I2
      I2=I3
      I3=I3+L3
      L3=MAP(I3+1)
      E0=E1
      E1=E2
      E2=MAP(I2+2)/DESCR(4)
      S0=S1
      S1=S2
      S2=.TRUE.
      F0=F1
      F1=F2
      GOTO1
2     IF(S1)F1=TRARA2(MAP(I1+3),NL,NB)/DESCR(7)
      IF(S2)F2=TRARA2(MAP(I2+3),NL,NB)/DESCR(7)
C   THESE TWO LOGICAL IFS CALL TRARA2 FOR THE FLUX FROM THE FIRST AND
C     SECOND ENERGY MAPS AT THE B,L POINT IF THEY HAVE NOT ALREADY BEEN
      S1=.FALSE.
      S2=.FALSE.
C   S1 AND S2 ARE FALSE SINCE F1 AND F2 ARE NOW FOUND.
      F(IE)=F1+(F2-F1)*(E(IE)-E1)/(E2-E1)
C
C   INTERPOLATE FOR THE FLUX F(IE) USING THE FLUXES AND ENERGIES FOR MAP
C     ONE AND TWO.
C   THE FOLLOWING COMMENTS APPLY TO THE REMAINING PROGRAM STATEMENTS.
C   IF THE FLUX F2 FOR THE SECOND ENERGY MAP IS GREATER THAN ZERO, OR TH
C     ZEROTH ENERGY MAP HAS NOT BEEN DEFINED, THE FINAL FLUX IS THE MAXI
C     OF THE INTEROOLATED FLUX OR ZERO.  IF THE FLUX FOR THE SECOND ENER
C     MAP IS EQUAL TO ZERO, AND THE ZEROTH ENERGY MAP HAS BEEN DEFINED,
C     THEN INTERPOLATE FOR THE FLUX USING THE ZEROTH AND FIRST ENERGY MA
C     CHOOSE THE MINIMUM OF THE TWO INTERPOLATIONS, AND THEN THE MAXIMUM
C     CHOICE AND ZERO FOR THE FINAL FLUX VALUE.
C
      IF(F2.GT.0.)GOTO3
      IF(I1.EQ.0)GOTO3
      IF(S0)F0=TRARA2(MAP(I0+3),NL,NB)/DESCR(7)
      S0=.FALSE.
      F(IE)=AMIN1(F(IE),F0+(F1-F0)*(E(IE)-E0)/(E1-E0))
3     F(IE)=AMAX1(F(IE),0.)
      RETURN
      END
      FUNCTION TRARA2(MAP,IL,IB)
      DIMENSION MAP(777)
      DATA FISTEP/256./
      FNL=IL
      FNB=IB
      ITIME=0
      I2=0
    1 L2=MAP(I2+1)
      IF(MAP(I2+2).GT.IL)GO TO 2
      I1=I2
      L1=L2
      I2=I2+L2
      GO TO 1
    2 CONTINUE
      IF(L1.LT.4.AND.L2.LT.4)GO TO 50
      IF(MAP(I2+3).GT.MAP(I1+3))GO TO 10
    5 KT=I1
      I1=I2
      I2=KT
      KT=L1
      L1=L2
      L2=KT
   10 FLOG1=MAP(I1+3)
      FLL1=MAP(I1+2)
      FLOG2=MAP(I2+3)
      FLL2=MAP(I2+2)
      DFL=(FNL-FLL1)/(FLL2-FLL1)
      FKB1=0.
      FKB2=0.
      IF(L1.LT.4)GO TO 32
      DO 17 J2=4,L2
      FINCR2=MAP(I2+J2)
      IF(FKB2+FINCR2.GT.FNB)GO TO 23
      FKB2=FKB2+FINCR2
   17 FLOG2=FLOG2-FISTEP
      ITIME=ITIME+1
      IF(ITIME.EQ.1)GO TO 5
      GO TO 50
   23 IF(ITIME.EQ.1)GO TO 30
      IF(J2.EQ.4)GO TO 28
      SL2=FLOG2/FKB2
      DO 27 J1=4,L1
      FINCR1=MAP(I1+J1)
      FKB1=FKB1+FINCR1
      FLOG1=FLOG1-FISTEP
      FKBJ1=((FLOG1/FISTEP)*FINCR1+FKB1)/((FINCR1/FISTEP)*SL2+1.)
      IF(FKBJ1.LE.FKB1)GO TO 31
   27 CONTINUE
      GO TO 55
   31 IF(FKBJ1.LE.FKB2)GO TO 29
      FKB1=0.
   30 FKB2=0.
   32 J2=4
      FINCR2=MAP(I2+J2)
      FLOG2=MAP(I2+3)
      FLOG1=MAP(I1+3)
   28 FLOGM=FLOG1+(FLOG2-FLOG1)*DFL
      FKBM=0.
      FKB2=FKB2+FINCR2
      FLOG2=FLOG2-FISTEP
      SL2=FLOG2/FKB2
      IF(L1.LT.4)GO TO 35
      J1=4
      FINCR1=MAP(I1+J1)
      FKB1=FKB1+FINCR1
      FLOG1=FLOG1-FISTEP
      SL1=FLOG1/FKB1
      GO TO 15
   29 FKBM=FKBJ1+(FKB2-FKBJ1)*DFL
      FLOGM=FKBM*SL2
      FLOG2=FLOG2-FISTEP
      FKB2=FKB2+FINCR2
      SL1=FLOG1/FKB1
      SL2=FLOG2/FKB2
   15 IF(SL1.LT.SL2)GO TO 20
      FKBJ2=((FLOG2/FISTEP)*FINCR2+FKB2)/((FINCR2/FISTEP)*SL1+1.)
      FKB=FKB1+(FKBJ2-FKB1)*DFL
      FLOG=FKB*SL1
      IF(FKB.GE.FNB)GO TO 60
      FKBM=FKB
      FLOGM=FLOG
      IF (J1.GE.L1) GO TO 55
      J1=J1+1
      FINCR1=MAP(I1+J1)
      FLOG1=FLOG1-FISTEP
      FKB1=FKB1+FINCR1
      SL1=FLOG1/FKB1
      GO TO 15
   20 FKBJ1=((FLOG1/FISTEP)*FINCR1+FKB1)/((FINCR1/FISTEP)*SL2+1.)
      FKB=FKBJ1+(FKB2-FKBJ1)*DFL
      FLOG=FKB*SL2
      IF(FKB.GE.FNB)GO TO 60
      FKBM=FKB
      FLOGM=FLOG
      IF(J2.GE.L2) GO TO 55
      J2=J2+1
      FINCR2=MAP(I2+J2)
      FLOG2=FLOG2-FISTEP
      FKB2=FKB2+FINCR2
      SL2=FLOG2/FKB2
      GO TO 15
   50 TRARA2=0.
      RETURN
   35 FINCR1=0.
      SL1=-900000.
      GO TO 20
   60 IF(FKB.LT.FKBM+1.E-20)GO TO 50
      TRARA2=FLOGM+(FLOG-FLOGM)*((FNB-FKBM)/(FKB-FKBM))
      TRARA2=AMAX1(TRARA2,0.)
      RETURN
 55   TRARA2=0.
      RETURN
      END
