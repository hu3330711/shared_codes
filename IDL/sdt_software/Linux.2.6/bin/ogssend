#!/bin/csh -f
#
# @(#)ogssend.shp	1.6 09/13/02 UCB SSL
#
# script to archive files generated by ogs, and send them to CMS
#

# skip over usage:
goto MAIN

USAGE:
echo "usage:"
echo "  ogssend [-P printer] [-e editor] [-c config]   ;sends latest files "
echo "  ogssend [options] YYYY.DDD.HH.MM.SS            ;sends files for date/time"
echo "  ogssend [options] -u YYYY.DDD.HH.MM.SS         ;re-sends files from user dir"
exit 1


MAIN:
#
# script starts here
#

set EDITOR = vi

#parse arguments
#
set argv = `getopt P:e:u:c: $*`

while (1)
	switch ($1)
	case "-P":
		set prtaut = $2
		shift; shift
		breaksw
	case "-e"
		set EDITOR = $2
		shift; shift
		breaksw
	case "-u":
		# this means send from the "user" directory
		set sendfromuser
		set datetime = $2
		shift; shift
		breaksw
	case "-c":
		if (-r $2) then
			source $2
		else
			echo "can't access specified config file"
			exit 1
		endif
		shift; shift
		breaksw
	case "--":
		shift	
		break		
		breaksw
	default:
		goto USAGE
		breaksw
	endsw
end

# single date argument
if (!($?sendfromuser) && $1 =~ ?*) then
	set datetime = $1
	shift
endif

# leftover arguments is an error
if ("$argv" =~ ?*) goto USAGE

# if cfg file has not already been sourced (with -c option) then source it
if (!($?cms)) then
	# source the ogs configuration file
	if (-f $FASTCONFIG/ogsDAT/ogs.cfg) then
		while (-f /tmp/ogs.lock.cfg.write)
			sleep 1
		end
		touch /tmp/ogs.lock.cfg.read.$$
		source $FASTCONFIG/ogsDAT/ogs.cfg
		\rm -f /tmp/ogs.lock.cfg.read.$$
	else if (-f $FASTLIB/ogsDAT/ogs.cfg) then
		source $FASTLIB/ogsDAT/ogs.cfg
	else
		echo "NO ogs CONFIGURATION FILE AVAILABLE\!"
		exit 1
	endif
endif

#
# check that the ~/.netrc is present and uncorrupted
#

diff ~/.netrc $FASTCONFIG/netrc.CMS >& /dev/null
if ( $status ) then
	echo ""
	echo "You don't have the correct ~/.netrc file for sending to CMS"
	echo "Perhaps you need to be set up with correct permissions "
	echo "before you can send files"
	echo ""
	echo "Do you want to try to copy the correct .netrc file into your home dir. ? (y/n)"
	set getnetrc = $<
	while ("$getnetrc" !~ [yY] && "$getnetrc" !~ [nN])
		echo "please respond with 'y' or 'n':"
		set getnetrc = $<
	end
	if ("$getnetrc" =~ [yY]) then
		cp $FASTCONFIG/netrc.CMS ~/.netrc
		if ( $status ) then
			echo 'Could not get netrc: abort.'
			exit 1
		endif
	else
		echo Bye.
		exit 1
	endif
endif
# make sure .netrc has proper mode.
chmod 600 ~/.netrc


if ($?datetime) then
	#see if datetime corresponds to an existing send file
	if ($?sendfromuser) then
		set senddir = $rduser/${spsend}.${datetime}
		if (!(-d $senddir)) then
			echo "No send directory for $datetime exists"
			echo "Possible date/times are:"
			ls -d $rduser/${spsend}.* | sed "s:$rduser/${spsend}.::"
			exit 1
		endif
	else
		set senddir = $rdsend/${spsend}.${datetime}
		if (!(-d $senddir)) then
			echo "no send directory for $datetime exists"
			echo "possible date/times are:"
			ls -d $rdsend/${spsend}.* | sed "s:$rdsend/${spsend}.::"
			exit 1
		endif
	endif
else
	#use latest files in send directory

	set senddir = `ls -rd $rdsend/${spsend}.????.???.??.??.?? | head -1`

	if ($senddir !~ ?*) then
		echo "Nothing to send\!: abort."
		exit 1
	endif
endif

cd $senddir

ls F???????????.?? >& /dev/null
if ($status) then
	echo "Send directory is empty\!: abort"
	exit 1
endif

clear

#
#write to log file
#

unset noclobber

# set unique name for log file in this directory
if (!($?sendfromuser)) then
	set sendlog = send.log
else
	set sendlog = send.log.fromuser`ls | grep -c 'send.log.fromuser[0-9]*$'`

endif


echo "Here's the log file:"
echo "    ---------------------------------------------------------------------"
tee $sendlog <<EOF
Files sent to ${cms}
from directory ${senddir}:

`ls F???????????.??`

Time   : `date`
User   : $user
Comment: 
EOF

#
# ask for a comment:
#

echo "    ---------------------------------------------------------------------"
echo ""
echo "Do you want to add a comment to the log file? (y/n) [editor: $EDITOR]"
set comment = $<
while (1)
	while ("$comment" !~ [yY] && "$comment" !~ [nN])
		echo "please respond with 'y' or 'n':"
		set comment = $<
	end

	if ("$comment" =~ [yY]) then

		$EDITOR $sendlog

		clear
	
		echo "Verify the log file:"
		echo "    ---------------------------------------------------------------------"
		# print out the log file for verification
		cat $sendlog
	else
		break
	endif

	echo "    ---------------------------------------------------------------------"
	echo ""
	echo "Do you need to correct the log file? (y/n)"
	set comment = $<
end

# cleanup emacs backup file (if exists)
if (-f ${sendlog}~) rm ${sendlog}~

#
# last chance to bail out
#

echo "Proceed with sending files? (y/n)"
set proceed = $<
while ("$proceed" !~ [yY] && "$proceed" !~ [nN])
	echo "please respond with 'y' or 'n':"
	set proceed = $<
end
if ("$proceed" =~ [nN]) then
	echo abort.
	rm $sendlog
	exit 1
endif

#
# print the files
#

echo ""
echo "Printing ATS command files and log file to $prtaut."
$prtcmd -d $prtaut `ls F?????ATSNOR.?? | head -1` `ls F?????ATSPAT.?? | head -1` $sendlog

if ($status) then
	echo ""
	echo "Printout failed, abort? (y/n)"
	set abort = $<
	while ("$abort" !~ [yY] && "$abort" !~ [nN])
		echo "please respond with 'y' or 'n':"
		set abort = $<
	end
	if ("$abort" =~ [yY]) then
		echo abort.
		rm $sendlog
		exit 1
	endif
endif

#
# copy send directory to archive and user 
#

if (!($?sendfromuser)) then
	echo 'Copying "ogs.send" directory into "archive" and "user" directories.'

	cp -r $senddir $rdarch
	cp -r $senddir $rduser
	chmod -R g+w $rdarch/`basename $senddir`
else
	echo 'Copying "ogs.send" directory into "archive" directory.'

	cp -r $senddir $rdarch
	chmod -R g+w $rdarch/`basename $senddir`
endif

#
# send the files to CMS
#

echo "Sending the files to CMS."
ftp $cms <<EOF
`ls F???????????.?? | awk '{print "put " \$1}'`
quit
EOF

#
# Send the files to ION (local CMS)
#

rcp F?????SUNNAD.?? ravi:/home/fastops/data.fast/soctransfer
rcp F?????ATSNOR.?? ravi:/home/fastops/data.fast/science
rcp F?????ATSNOR.?? juneau:/home/ogs/ogsfile
rsh juneau "chmod g+w /home/ogs/ogsfiles/F*"

#
# delete this send directory and all previous ones
#

if (!($?sendfromuser)) then
	echo 'Removing pending "ogs.send" directories (sent version and earlier versions)'

	cd $rdsend
	rm -r `ls -d ${spsend}.????.???.??.??.?? | awk "{print} /$senddir:t/ {exit}"`

endif

echo ""
echo Have a nice day.
