;+
; FUNCTION:
; 	 EIESA_UNPACK_SURV_HDR
;
; DESCRIPTION:
;
;	function to unpack the Eesa and Iesa packet headers
;
;	A structure of the following format is returned:
;
;	   DATA_NAME     			STRING  'E[I]esa Survey Header'
;	   VALID         			INT       1
; 	   PROJECT_NAME  			STRING    'FAST'
; 	   UNITS_NAME    			STRING    'Raw'
;	   TIME          			DOUBLE    8.0118726e+08
;	   SPIN_NUMBER				INT       0
;	   SPIN_PHASE				INT       0
;	   MAG_PHASE				INT       0
;	   SWEEP_MODE    			INT       0 
;	   RETRACE       			INT       0 
;	   TOP_ENERGY    			INT       0
;	   DIRECTION     			INT       0               
;	   AMPLITUDE     			INT       0
;	   CALIBRATE_MODE  			INT       0     
;	   LOW_ENERGY    			INT       0
;	   DWELL         			INT       0
;	   ACCUM         			INT       0
;	   MODE          			INT       0
;	   NENERGY_MODE  			INT       0
;	   DESPUN        			INT       0
;	   SWEEPS_PER_AVERAGE 			INT       0
;	   BLOCKS_PER_PACKET 			INT       0
;	   NENERGY       			INT       0
;	   NANGLE        			INT       0
;	   NBINS         			INT       0
;	   TYPE         			INT       0
;	   SC       	  			INT       0
;	   MARRAY_HDR_IDX 	  		INT       0
;	   MARRAY_HDR_SUBCNT 	  		INT       0
;	   BLKS_FROM_OLD_SWP 	  		INT       0
;	   BLKS_REM_IN_PNDING_SWP 		INT       0
;	   NON_TTAGED_DATA_IDX 	  		INT       0
;	   DATA_INDICES 	  		INTARR(32)
;	   SECS_PER_BLOCK 	  		DOUBLE    0
;	   SPIN_RATE 	  			DOUBLE    0
;	
; CALLING SEQUENCE:
;
; 	data = eiesa_unpack_surv_hdr (eiesa_surv_data_struct)
;
; ARGUMENTS:
;
;	eiesa_surv_data_struct	This is a struct return by get_eesa_surv ()
;				for Eesa data, or get_iesa_surv () for
; 				Iesa data.
;
; RETURN VALUE:
;
;	Upon success, the above structure is returned, with the valid tag
;	set to 1.  Upon failure, the valid tag will be 0.
;
; REVISION HISTORY:
;
;	@(#)eiesa_unpack_surv_hdr.pro	1.4 04/20/05
; 	Originally written by Jonathan M. Loran,  University of 
; 	California at Berkeley, Space Sciences Lab.   June '95
;-

FUNCTION Eiesa_unpack_surv_hdr, dataStruct

   ; get local copy of dataStruct
   
   ds = dataStruct

   ; check for data type

   IF N_ELEMENTS(ds) EQ 0 THEN BEGIN
      PRINT, 'Input parameter appears not to be filled.  The input'
      PRINT, 'parameter must be generated by one of the functions:  '
      PRINT, '	get_eesa_surv () for Eesa data, '
      PRINT, '	get_iesa_surv () for Iesa data.'

      RETURN, {data_name: 'Null', valid: 0}
   ENDIF 

   tags = TAG_NAMES (ds)
   containsDatName = (WHERE ( tags EQ 'DATA_NAME' ))(0) NE -1     $
     AND (WHERE ( tags EQ 'HEADER_BYTES' ))(0) NE -1              $
     AND (WHERE ( tags EQ 'TIME' ))(0) NE -1

   IF containsDatName LE 0 THEN BEGIN
      PRINT, 'Input parameter appears not to be filled.  The input'
      PRINT, 'parameter must be generated by one of the functions:  '
      PRINT, '	get_eesa_surv () for Eesa data, '
      PRINT, '	get_iesa_surv () for Iesa data.'

      RETURN, {data_name: 'Null', valid: 0}
   ENDIF
   
   IF ds.data_name EQ 'Eesa Survey' THEN apid = 1024L            $
     ELSE IF ds.data_name EQ 'Iesa Survey' THEN apid = 1025L     $
     ELSE BEGIN
      PRINT, 'Input data structure is not of the correct type.  The input'
      PRINT, 'parameter must be generated by one of the functions:  '
      PRINT, '	get_eesa_surv () for Eesa data, '
      PRINT, '	get_iesa_surv () for Iesa data.'

      RETURN, {data_name: 'Null', valid: 0}
   ENDELSE
      
   ; allocate data space now
   
   sweep_mode = 0L
   retrace = 0L
   top_energy = 0L
   direction = 0L
   amplitude = 0L
   calibrate_mode = 0L
   low_energy = 0L
   dwell = 0L
   accum = 0L
   mode = 0L
   nenergy_mode = 0L
   despun = 0L
   sweeps_per_average = 0L
   blocks_per_packet =0L
   nenergy = 0L
   nangle = 0L
   nbins = 0L
   spin_number = 0L
   spin_phase = 0L
   mag_phase = 0L
   type = 0L
   sc = 0L
   marray_hdr_idx = 0L
   marray_hdr_subcnt = 0L
   blocks_belonging_to_old_sweep = 0L
   blocks_remaining_in_pending_sweep = 0L
   non_ttaged_data_index = 0L
   data_indices = LONARR(32)
   secs_per_block = 0D
   spin_rate = 0D
   
   flg64 = 1
   lmdle1 = STRING ('esaIdlUtilLib_3264.so')
   if (!VERSION.RELEASE LE '5.4') then begin
       flg64 = 0
       lmdle1 = STRING ('esaIdlUtilLib.so')
   endif

   ret = CALL_EXTERNAL (lmdle1, 'unpackEiesaSurvHdr',	$
                        ds.header_bytes,				$
                        apid,						$
                        ds.time,					$
                        sweep_mode, 					$
                        retrace, 					$
                        top_energy, 					$
                        direction, 					$
                        amplitude, 					$
                        calibrate_mode,					$
                        low_energy, 					$
                        dwell,						$
                        accum, 						$
                        mode, 						$
                        nenergy_mode, 					$
                        despun,						$
                        sweeps_per_average, 				$
                        blocks_per_packet,  				$
                        nenergy, 					$
                        nangle,						$
                        nbins, 						$
                        spin_number,					$
                        spin_phase, 					$
                        mag_phase, 					$
                        type, 						$
                        sc, 						$
                        marray_hdr_idx, 				$
                        marray_hdr_subcnt, 				$
                        blocks_belonging_to_old_sweep, 			$
                        blocks_remaining_in_pending_sweep,		$
                        non_ttaged_data_index, 				$
                        data_indices, 					$
                        secs_per_block, 				$
                        spin_rate)

   IF ret THEN BEGIN                              ; trouble so bail out now
      PRINT, 'Error unpacking data header.. abort'
      RETURN, {data_name: 'Null', valid: 0}
   ENDIF

      ; get data values into correct dimensions here

   IF apid EQ 1024 THEN data_name = 'Eesa Survey Header'              $
     ELSE data_name = 'Iesa Survey Header'
   units_name = 'Raw'

   RETURN,  {data_name:	data_name, 					$
             valid: 	1, 						$
              project_name: 'FAST', 					$
             units_name: units_name, 					$
             time: ds.time,	 					$
             spin_number: spin_number,					$
             spin_phase: spin_phase,					$ 
             mag_phase: mag_phase,					$ 
             sweep_mode: sweep_mode, 					$
             retrace: retrace, 					$
             top_energy: top_energy, 					$
             direction: direction, 					$
             amplitude: amplitude, 					$
             calibrate_mode: calibrate_mode, 				$
             low_energy: low_energy, 					$
             dwell: dwell, 						$
             accum: accum, 						$
             mode: mode, 						$
             nenergy_mode: nenergy_mode, 				$
             despun: despun, 						$
             sweeps_per_avg: sweeps_per_average, 			$
             blocks_per_pkt: blocks_per_packet, 			$
             nenergy: nenergy, 						$
             nangle: nangle, 						$
             nbins: nbins, 						$
             type: type, 						$
             sc: sc, 							$
             marray_hdr_idx: marray_hdr_idx, 				$
             marray_hdr_subcnt: marray_hdr_subcnt, 			$
             blks_from_old_swp: blocks_belonging_to_old_sweep,		$
             blks_rem_in_pnding_swp: blocks_remaining_in_pending_sweep,	$
             non_ttaged_data_idx: non_ttaged_data_index, 		$
             data_indices: data_indices, 				$
             secs_per_block: secs_per_block, 				$
             spin_rate: spin_rate}

END 

