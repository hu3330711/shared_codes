;+
;PROCEDURE:	convert_tms_units
;PURPOSE:	to convert units of data from the teams
;		instruments.
;INPUT:		
;	data:	A 3d structure such as those generated by get_fa_th,etc.
;	units:	A string telling the procedure which units to convert to, such
;		as ncounts,rate,nrate,eflux,flux
;
;KEYWORDS:
;	scale:	A named variable that will return the scale used to convert
;
; REVISION HISTORY:
;
;   Made from convert_esa_units.pro
;   Last modification:     Li Tang   Univ. of New Hampshire.   8/22/96
;			   3D data(himass) added.
;-

pro convert_tms_units, data,units, $
  SCALE = scale, sc = sc


if strupCASE(units) eq strupCASE(data.units_name) then return

energy = data.energy           ; in eV                (ne,nbins)
geom   = data.geom             ; number of bins summed (ne,nbins)
n_e = data.nenergy              ; number of energies   
nbins=data.nbins               ; number of bins       
dt =  data.integ_t   	       ; integration time 
gf = data.geomfactor           ; geometric factor of smallest bin
sf = data.spin_fract	       ; spin fraction of angles (ne, nbins)
eff = data.eff		       ; efficiency (ne, nbins)
mass = data.mass               ; scaler
if ndimen(geom) eq 0 then geom = [geom]

scale = 0
CASE strupCASE(units) of 
'COUNTS' :  scale = 1.
'NCOUNTS':  scale = 1. / (geom)
'RATE'   :  scale = 1. / (dt * sf)
'NRATE'  :  scale = 1. / (dt * sf * geom)
'EFLUX'  :  scale = 1. / (dt * sf * eff * (gf * geom))
'FLUX'   :  scale = 1. / ((dt * sf * eff * (gf * geom)) * energy)
'DF'     :  scale = 1. / ((dt * sf * eff * (gf * geom)) * energy^2 *	   $
							 2./mass/mass*1e5 )
ELSE: BEGIN
        print,'Undefined units: ',units
	return
      END
ENDCASE


CASE strupcase(data.units_name) of 
'COUNTS' : scale = scale * 1.
'NCOUNTS': scale = scale * (geom)
'RATE'   : scale = scale * (dt * sf )
'NRATE'  : scale = scale * (dt * sf * geom)
'EFLUX'  : scale = scale * (dt * sf * eff * (gf * geom))
'FLUX'   : scale = scale * (dt * sf * eff * (gf * geom)) * energy
'DF'     : scale = scale * (dt * sf * eff * (gf * geom)) * energy^2 *       $ 
							    2./mass/mass*1e5
ELSE: BEGIN
        print,'Unknown starting teams units: ',data.units_name
	return
      END
ENDCASE

data.units_name = units

;if sc eq 1 Then return

IF find_str_element(data,'ddata') GE 0 THEN data.ddata = data.ddata*scale
IF ndimen(data.data) EQ 3 THEN BEGIN
   FOR mbin=0, (data.mbins-1) DO data.data(*,*,mbin)=data.data(*,*,mbin)*scale
ENDIF ELSE data.data = data.data * scale 
RETURN
END



;units_names = ['Counts','Ncounts','Rate','Nrate','Eflux','Flux','DF']
