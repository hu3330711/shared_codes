;+
;PROCEDURE:	convert_esa_units
;PURPOSE:	to convert units of data from any of the eesa or pesa
;		instruments.
;INPUT:		
;	data:	A 3d structure such as those generated by get_el,get_pl,etc.
;	units:	A string telling the procedure which units to convert to, such
;		as ncounts,rate,nrate,eflux,flux,df
;
;KEYWORDS:
;	scale:	A named variable that will return the scale used to convert
;
;CREATED BY:	Davin Larson
;LAST MODIFICATION:	@(#)convert_esa_units.pro	1.6 95/11/07
;-

pro convert_esa_units, data,units, $
  SCALE = scale

if strupcase(units) eq strupcase(data.units_name) then return

energy = data.energy           ; in eV                (ne,nbins)
geom   = data.geom             ; number of bins summed (nbins)
n_e = data.nenergy             ; number of energies   
nbins=data.nbins               ; number of bins       
dt = data.eff * data.integ_t; effective duty cycle x integration time (ne)
gf = data.geomfactor           ; geometric factor of smallest bin
mass = data.mass               ; scaler
if ndimen(geom) eq 0 then geom = [geom]

scale = 0
case strupcase(units) of 
'COUNTS' :  scale = 1.
'NCOUNTS':  scale = 1. / (replicate(1.,n_e) # geom)
'RATE'   :  scale = 1. / (dt # replicate(1.,nbins))
'NRATE'  :  scale = 1. / (dt # geom)
'EFLUX'  :  scale = 1. / (dt # (gf * geom))
'FLUX'   :  scale = 1. / ((dt # (gf * geom)) * energy)
'DF'     :  scale = 1. / ((dt # (gf * geom)) * energy^2 * 2./mass/mass*1e5 )
else: begin
        print,'Undefined units: ',units
	return
      end
endcase


case strupcase(data.units_name) of 
'COUNTS' :  scale = scale * 1.
'NCOUNTS':  scale = scale * (replicate(1.,n_e) # geom)
'RATE'   :  scale = scale * (dt # replicate(1.,nbins))
'NRATE'  :  scale = scale * (dt # geom)
'EFLUX'  :  scale = scale * (dt # (gf * geom))
'FLUX'   :  scale = scale * (dt # (gf * geom)) * energy
'DF'     :  scale = scale * (dt # (gf * geom)) * energy^2 * 2./mass/mass*1e5
else: begin
        print,'Unknown starting units: ',data.units_name
	return
      end
endcase

data.units_name = units

if find_str_element(data,'ddata') ge 0 then data.ddata = data.ddata*scale
data.data = data.data * scale 
return
end



;units_names = ['Counts','Ncounts','Rate','Nrate','Eflux','Flux','DF']
