/* SDTSourceDefs.h */
/* This file contains declarations for RPC calling functions and other
 * information.
 */

#ifndef SDTSOURCEDEFS_H
#define SDTSOURCEDEFS_H

#ifndef SUNOS4
#ifdef __cplusplus
extern "C" {
#endif
#endif

/* SCCS ID string: */
#define SccsId_SDTSourceDefs_h "@(#)SDTSourceDefs.h	1.42, 11/19/07"

#define TCP_TYPE "tcp"
#define UDP_TYPE "udp"
#define RPC_TYPE TCP_TYPE

#define DQH_RPC_PROG           0x20000107
#define DQH_RPC_VERS           1
#define CRRES_RPC_PROG         0x20000109
#define CRRES_RPC_VERS         1
#define GEOTAIL_RPC_PROG       0x20000111
#define GEOTAIL_RPC_VERS       1
#define ISEE_RPC_PROG          0x20000113
#define ISEE_RPC_VERS          1
#define SCM_RPC_PROG           0x20000115
#define SCM_RPC_VERS           1
#define SDTUI_RPC_PROG         0x20000119
#define SDTUI_RPC_VERS         1
#define GEOSURVEY_RPC_PROG     0x20000121
#define GEOSURVEY_RPC_VERS     1
#define CRRSURVEY_RPC_PROG     0x20000123
#define CRRSURVEY_RPC_VERS     1
#define FAST_RPC_PROG          0x20000125
#define FAST_RPC_VERS          1
#define ISEE2_RPC_PROG         0x20000127
#define ISEE2_RPC_VERS         1
#define WIND_RPC_PROG          0x20000129
#define WIND_RPC_VERS          1
#define CLUSTER_RPC_PROG       0x20000131
#define CLUSTER_RPC_VERS       1
#define POLAR_RPC_PROG         0x20000133
#define POLAR_RPC_VERS         1
#define THEMIS_RPC_PROG        0x20000135
#define THEMIS_RPC_VERS        1

/* The SNAPON RPC ID should be a higher number than the others: */
#define SNAPON_RPC_PROG        0x20000141
#define SNAPON_RPC_VERS        1

#define GET_DATA_QUANTITY_DESCRIPTIONS_PROC   50
#define GET_PLOT_QUANTITY_DESCRIPTIONS_PROC   51
#define GET_DATABASE_LIST_PROC                52
#define SELECT_DATABASE_ENTRY_PROC            53
#define GENERATE_DATA_INSTANCE_LIST_PROC      54
#define PASS_PARAMETER_PROC                   55
#define GET_DATA_INFORMATION_PROC             56
#define DESTROY_DATA_INSTANCE_LIST_PROC       57
#define REMOVE_TIMESPAN_ALL_DQIS_PROC         58
#define SHUTDOWN_PROC                         59
#define SNAPON_GET_SIZE_PROC                  60
#define SNAPON_FILL_BUFFERS_PROC              61
#define SNAPON_SHUTDOWN_PROC                  62
#define GET_DATABASE_DIRECTORIES_PROC         63
#define SELECT_DATABASE_DIRECTORY_PROC        64
#define QUERY_DATASET_TIMESPAN_PROC           65
#define QUERY_TIMESPAN_IS_COUNTED_PROC        66
#define QUERY_DATASET_COUNT_SESSION_PROC      67
#define GET_DEFINITION_OF_TIME_PROC           68
#define GET_DATA_MANAGERS_PROC                69
#define GET_DATA_BASE_INFORMATION_PROC        70
#define GET_DQD_PQD_FROM_DB_RESPONSE_PROC     71
#define START_SOURCE_DATA_CREATION_PROC       72
#define QUERY_DBASE_ACTION_ON_DQIS_PROC       73
#define SPECIAL_PASS_PARAMETER_PROC           74
#define NRT_SYNCHRONIZE_PROC                  81
#define UI_TO_SCM_NEW_DATA_UNIT_PROC          85
#define USER_INTERVENTION_REQUEST             86
#define INQUIRE_DQD_DBASE_REQUIREMENTS_PROC   90
#define GET_DATA_FROM_DBASE_REQUEST_PROC      91
#define RETURN_MULTI_ALGORITHM_DQD_INFO       92
#define SET_CURRENT_SCM_MISSION_RETRIEVAL     93

#define UNABLE_TO_GET_RPC_ARGS                -50
#define UNRECEIVED_RPC_RESPONSE               -51
#define INTERNAL_ERROR                        -52

/* RPC assignment block range between separate, concurrent SDT
 * runs.
 */
#define SDT_RPC_BLOCK_RANGE                   600

#define SSL_VECN   1
#define SSL_DSC    2
#define NOT_DERIVED   1
#define DERIVED       2
/* end - do these belong here? */

/* These are used to allow the SELECT_DATABASE_DIRECTORY_PROC
 * RPC call to tell the UI that it must wait for the TimeSpan
 * information to be processed out for a particular request.
 * In particular, FAST uses this to allow uncounted data sets
 * to be counted on request.
 */
#define  SDT_DATABASE_ENTRY_PREPROCESSING_START_IDCODE  101000
#define  SDT_DELAY_DATABASE_ENTRY_STRING  "SDT_PREPROCESSING_REQUIRED"

#define  SDT_RPC_ID_STR  "RPCIndex="
#define  SDT_RPC_ID_SLEN  9

/* This definition (2004/03/04) exists to allow multiple-run SDT -
 * each SDT must be assigned a number which may required being
 * passed as program invocation arguments.  For instance, if at
 * startup, an invocation of SDT is given a run index of "2", then
 * "SDT" may want to invoke, say the "dqh" with the extra argument:
 *
 *    SDTRunIndex=2
 *
 */
#define  SDT_RUN_IDX_STR          "SDTRunIndex="
#define  SDT_RUN_IDX_STR_SLEN     12

/* The maximum number of allowable concurrent runs of SDT on
 * a single system.
 */
#define  SDT_MAX_CONCURRENT_RUNS  10

/* Allocate integer space of this size for all the RPC's that
 * might be generated by a single run of SDT, when allowing
 * concurrent runs of SDT.  As of 2004/03/04, the value was
 * set to:  1,048,576  (0x100000).  Thus, when SDT run index is:
 *
 *  SDT index      RPC program index range:
 *      0    ->    0x20000000  to  0x200fffff
 *      1    ->    0x20100000  to  0x201fffff
 *      2    ->    0x20200000  to  0x202fffff
 *      etc.
 */
#define  SDT_CONCURRENT_RUN_RPC_SPACE  0x100000

/* The base name of the SDT SHM cleanup script.  In multi-run SDT,
 * each SDT run will maintain a temporary file of this name
 * with suffix ".N", where N is the SDT run index.  When the run
 * exits, this file will be "source"'d, then deleted by the "sdt"
 * or "sdt_batch" run script.
 */
#define  SDT_MEMORY_CLEANUP_SCRIPT_NAME  "sdt_clear_shm"

/* The base name of the SDT Process cleanup script.  In multi-run
 * SDT, each SDT run will maintain a temporary file of this name
 * with suffix ".N", where N is the SDT run index.  When the run
 * exits, this file will be "source"'d, then deleted by the "sdt"
 * or "sdt_batch" run script.
 */
#define  SDT_PROCESS_CLEANUP_SCRIPT_NAME  "sdt_clear_proc"

/* The SDT index-in-use file.  This is the file that contains the
 * status of the available SDT run indices:
 *
 *    0 through (SDT_MAX_CONCURRENT_RUNS - 1), inclusive
 *
 * It is a public, or group writeable file in /tmp
 *
 * The file is queried, when SDT is invoked, in order to assign
 * an unused run index to the new SDT session.
 */
#define  SDT_CONCURRENT_RUN_IDX_STATUS_FILE  "/tmp/.sdt_index_file"

/* If we use SHM instead of a "tmp" file to store SDT index-in-use
 * information, this is the SHM Key for it.  Note that it has a
 * value slightly less than the key value of the first SDT data SHM
 * key (7890).  In that way, it should never be confused with an
 * SDT DQI SHM.
 */
#define  SDT_CONCURRENT_RUN_IDX_STATUS_SHM  7888

/* In the SHM case, this is the name of the temporary "lock" file
 * that is used to control access to the SDT index-in-use SHM.
 * It is more proper to use a system semaphore, but clashes to
 * this SHM will be very infrequent and a simple lock file
 * should do the trick.
 */
#define  SDT_CONCURRENT_RUN_IDX_LOCK_FILE  "/tmp/.sdt_lock"

/* In the SHM case, we need a limit on the maximum length of
 * each RunIndex record.  This is different than in the "file"
 * case, since the size of an SHM is set on creation and we
 * have to set a maximum size per record to be sure that we
 * don't overrun boundaries:
 */
#define  SDT_RUN_IDX_INFO_BUF_LEN          1500

/* A "no information available" string used by some SDT RPC
 * calls.
 */
#define  SDT_NO_INFORMATION_AVAILABLE      "No_Information"

/* For use with SYNCHRONIZE_NRT_PROC Rpc call: */
#define NRT_STATUS_CONNECTING                   1
#define NRT_STATUS_CONNECTED                    2
#define NRT_STATUS_LOGGING_IN                   3
#define NRT_STATUS_SETTING_DATA_TYPES           4
#define NRT_STATUS_WAITING_FOR_DATA             5
#define NRT_STATUS_GATHERING_INITIAL_DATA       6
#define NRT_STATUS_GETTING_DATA                 7
#define NRT_STATUS_END_OF_DATA_FOUND            8
#define NRT_STATUS_ERROR_CANNOT_CONNECT        -1
#define NRT_STATUS_ERROR_CANNOT_LOGIN          -2
#define NRT_STATUS_ERROR_CANNOT_SET_DATA_TYPE  -3
#define NRT_STATUS_ERROR_CANNOT_GET_DATA       -4

#define NRT_ID_INTEGER                  121
#define NRT_ID_STRING                   "ISTP_NRT"
#define NRT_ID_STRING_CLS1              "CLUSTER_NRT_SPC1"
#define NRT_ID_STRING_CLS2              "CLUSTER_NRT_SPC2"
#define NRT_ID_STRING_CLS3              "CLUSTER_NRT_SPC3"
#define NRT_ID_STRING_CLS4              "CLUSTER_NRT_SPC4"
#define NRT_CONNECTING_MSG              "NRT Connecting ..."
#define NRT_CONNECTED_MSG               "NRT Connection Succeeded"
#define NRT_LOGGING_IN_MSG              "NRT Logging In ..."
#define NRT_SETTING_DATA_TYPES_MSG      "NRT Setting Data Types"
#define NRT_WAIT_FOR_DATA_MSG       "NRT Waiting for Data ..."
#define NRT_GATHERING_INITIAL_DATA_MSG  "NRT Gathering Initial Data ..."
#define NRT_GETTING_DATA_MSG            "NRT Receiving Data ..."
#define NRT_END_OF_DATA_MSG             "NRT End of Data Found"

#ifndef SUNOS4
#ifdef __cplusplus
}
#endif
#endif

#endif  /* SDTSOURCEDEFS_H */
