#ifndef SnapOnXDR_h
#define SnapOnXDR_h

/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#define SccsId_SnapOnXDR_h "@(#)SnapOnXDR.h	1.13, 12/03/06"

#include <rpc/rpc.h>
#include <rpc/types.h>

#include <SDTDescription.h>
#include <SDTDescriptionXDR.h>
#include <SDTDataBase.h>
#include <SDTDataBaseXDR.h>

struct Nomen_struct {
        int32  source ;
	char *str;
};
typedef struct Nomen_struct Nomen;

struct NameList_struct {
	int nqtys;
	struct {
		u_int qty_len;
		Nomen *qty_val;
	} qty;
};
typedef struct NameList_struct NameList;

struct Param_struct {
	char *Prompt;
	int Type;
	char *Default;
	char *Value;
};
typedef struct Param_struct Param;

struct ParamList_struct {
	int nqtys;
	struct {
		u_int qty_len;
		Param *qty_val;
	} qty;
};
typedef struct ParamList_struct ParamList;

struct SetUpValuesRequest_struct {
	DataQuantityDescription DQD;
	DataBaseResponse DBRes;
	NameList Inputs;
	ParamList Params;
	double Scale;
	double Offset;
};
typedef struct SetUpValuesRequest_struct SetUpValuesRequest;

// Note:  JBV 2006/03/28.  In upgrading to support 64-bit systems,
// it turns out that the fields "Size", "ArraySize", and
// "ArrayDescriptionSize" only need to be 32-bit integers.  At
// least for now, we can safely assume that no single SDT DQI
// will ever have more than 2.1 billion elements in it (max
// int32 signed value), so "Size" can remain "int".  Likewise,
// "ArraySize", which is "ncols * nrows" will never be large,
// and "ArrayDescriptionSize", which is the number of bytes
// in the array description component of a multi-dimensional
// array will never be more than a few million bytes, and almost
// all of the time, much smaller.
struct SetUpValuesResponse_struct {
	int Size;
	int ArraySize;
	int ArrayDescriptionSize;
};
typedef struct SetUpValuesResponse_struct SetUpValuesResponse;

#ifdef PRE_CPLPL_4

/* Use of EXTERN_FUNCTION in "CC" requires "c_varieties.h" which
 * doesn't exist in C++ 4.0
 */

EXTERN_FUNCTION(bool_t xdr_Nomen_struct,(XDR *, Nomen_struct *));
EXTERN_FUNCTION(bool_t xdr_Nomen,(XDR *, Nomen *));
EXTERN_FUNCTION(bool_t xdr_NameList_struct,(XDR *, NameList_struct *));
EXTERN_FUNCTION(bool_t xdr_NameList,(XDR *, NameList *));
EXTERN_FUNCTION(bool_t xdr_Param_struct,(XDR *, Param_struct *));
EXTERN_FUNCTION(bool_t xdr_Param,(XDR *, Param *));
EXTERN_FUNCTION(bool_t xdr_ParamList_struct,(XDR *, ParamList_struct *));
EXTERN_FUNCTION(bool_t xdr_ParamList,(XDR *, ParamList *));
EXTERN_FUNCTION(bool_t xdr_SetUpValuesRequest_struct,(XDR *, SetUpValuesRequest_struct *));
EXTERN_FUNCTION(bool_t xdr_SetUpValuesRequest,(XDR *, SetUpValuesRequest *));

#else

extern bool_t xdr_Nomen_struct(XDR *, struct Nomen_struct *);
extern bool_t xdr_Nomen(XDR *, Nomen *);
extern bool_t xdr_NameList_struct(XDR *, struct NameList_struct *);
extern bool_t xdr_NameList(XDR *, NameList *);
extern bool_t xdr_Param_struct(XDR *, struct Param_struct *);
extern bool_t xdr_Param(XDR *, Param *);
extern bool_t xdr_ParamList_struct(XDR *, struct ParamList_struct *);
extern bool_t xdr_ParamList(XDR *, ParamList *);
extern bool_t xdr_SetUpValuesRequest_struct(XDR *,
    struct SetUpValuesRequest_struct *);
extern bool_t xdr_SetUpValuesRequest(XDR *, SetUpValuesRequest *);
extern bool_t xdr_SetUpValuesResponse_struct(XDR *xdrs,
   struct SetUpValuesResponse_struct *objp) ;
extern bool_t xdr_SetUpValuesResponse(XDR *xdrs,
   SetUpValuesResponse *objp) ;

#endif

#endif /* SnapOnXDR_h */
