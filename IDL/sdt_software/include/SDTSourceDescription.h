/* SDTSourceDescription.h */
/* This file contains declarations for creating "instance" widgits: */
/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef SDTSOURCEDESCRIPTION_H
#define SDTSOURCEDESCRIPTION_H

#ifndef SUNOS4
#ifdef __cplusplus
extern "C" {
#endif
#endif

#include <rpc/rpc.h>
#include <SDTInstance.h>
#include <SDTDescriptionXDR.h>
#include <SDTInstanceXDR.h>
#include <SDTDataBase.h>

/* SCCS ID string: */
#define SccsId_SDTSourceDescription_h "@(#)SDTSourceDescription.h	1.23, 04/17/07"

/* Added 2002/03/03:  this is a prefix that is used for "Stub" DQD names
 * to the SCM when calling SCM modules to generate replacement quantities.
 * The purpose of this is to notify the SCM that when the science module
 * for the replacement is called, no new quantities are to be generated.
 * The parameter list has the necessary info.
 */
#define  SCM_STUB_DQD_PREFIX  "RplcDQDxyzzy."

/* Added 2005/05/19:  this is a prefix that is used in the new
 * "Appendix" field, for FAST batch automatic data retrieval/removal.
 * Immediately following it, as part of the first String in the
 * "Appendix" StringList, will be the name of the temporary directory
 * where the on-the-fly retrieved data will be stored, and must
 * be removed when the decom session is over.
 */
#define  FAST_AUTO_TMP_DDIR_PREFIX  "TmpDataDirxyzzy."

struct ParameterReq_struct {
	char *Prompt;
	int   Type;
	char *Default;
	char *Data;
};
typedef struct ParameterReq_struct ParameterReq ;
extern bool_t xdr_ParameterReq_struct(XDR *, struct ParameterReq_struct *);
extern bool_t xdr_ParameterReq(XDR *, ParameterReq *);

struct ParameterReqList_struct {
	int nqtys;
	struct {
		u_int qty_len;
		ParameterReq *qty_val;
	} qty;
};
typedef struct ParameterReqList_struct ParameterReqList ;
extern bool_t xdr_ParameterReqList_struct(XDR *,
    struct ParameterReqList_struct *);
extern bool_t xdr_ParameterReqList(XDR *, ParameterReqList *);

struct DqdParameterUsage_struct {
    DataQuantityIdentifier DqdId ;
    ParameterReqList  Params ;
} ;
typedef struct DqdParameterUsage_struct DqdParameterUsage ;
extern bool_t xdr_DqdParameterUsage_struct(XDR *,
   struct DqdParameterUsage_struct *);
extern bool_t xdr_DqdParameterUsage(XDR *, DqdParameterUsage *);

struct DqdParameterUsageList_struct {
	int nqtys;
	struct {
		u_int qty_len;
		DqdParameterUsage *qty_val;
	} qty;
};
typedef struct DqdParameterUsageList_struct DqdParameterUsageList ;

extern bool_t xdr_DqdParameterUsageList_struct(XDR *,
    struct DqdParameterUsageList_struct *);

extern bool_t xdr_DqdParameterUsageList(XDR *, DqdParameterUsageList *);

/* This is the basic request for a DataQuantityInstance and data assignment
 * to memory:
 */
struct ConstructDQIRequest_struct {
	DataBaseResponse DBResponse ;        /* Contains the TimeSpan
					      * and (for FAST) data file
					      * name.
					      */
	DataQuantityDescriptionList DQDList; /* The DQD's to provide
					      * instances for.
					      */
	int        MemType ;                 /* Suggests which type of
					      * memory to use:
					      * Possible values:
					      *   SharedMemoryType
					      *   MappedMemoryType
					      */

	int        RealTime ;                /* Used only by FAST:
					      * Possible values:
					      *    0 -> Data Analysis mode
					      *    1 -> Realtime mode
					      */
	int        Reserved1 ;               /* Used only by FAST:
					      * reserved for future use.
					      */
	StringList Appendix ;                /* Created 2005/05/19 for
					      * use with on-the-fly
					      * batch data retrieval
					      * and removal for FAST.
					      * It can be used for
					      * other things later.
					      */
	DqdParameterUsageList NewParams ;    /* Created 2005/08/19 for
	                                      * to fix a bug with
					      * replacement qtys in
					      * SDT and how the SCM
					      * handles DQI generation.
					      */
};
typedef struct ConstructDQIRequest_struct ConstructDQIRequest ;

extern bool_t xdr_ConstructDQIRequest_struct(XDR *, struct ConstructDQIRequest_struct *);
extern bool_t xdr_ConstructDQIRequest(XDR *, ConstructDQIRequest *);

struct ConstructDQIRequestList_struct {
	int nqtys;
	struct {
		u_int qty_len;
		ConstructDQIRequest *qty_val;
	} qty;
};
typedef struct ConstructDQIRequestList_struct ConstructDQIRequestList ;

extern bool_t xdr_ConstructDQIRequestList_struct(XDR *, struct ConstructDQIRequestList_struct *);
extern bool_t xdr_ConstructDQIRequestList(XDR *, ConstructDQIRequestList *);

struct ConstructDQIResponse_struct {
	ParameterReqList ParamReqList;
        DqdParameterUsageList DqdParamUsage ;
	DataQuantityInstanceList DQIList;
	String  Notes ;
};
typedef struct ConstructDQIResponse_struct ConstructDQIResponse;
extern bool_t xdr_ConstructDQIResponse_struct(XDR *, struct ConstructDQIResponse_struct *);

extern bool_t xdr_ConstructDQIResponse(XDR *, ConstructDQIResponse *);

/* Structure for querying the effect of database manager activity on
 * existing DQIs.  Note that there are no utility routines for this
 * structure (also the case with "ConstructDQIResponse"), so this
 * has to be handled field-by-field.  The initial purpose of this
 * structure is to make sure that only those DQIs effected by a
 * database copy or other change will be known to the software.
 */
struct QueryDBaseActionOnDQIs_struct {
	DataBaseResponse        DBResponse ;
	DataQuantityInstanceList DQIList;
	String  Mode ;
};
typedef struct QueryDBaseActionOnDQIs_struct QueryDBaseActionOnDQIs ;
extern bool_t xdr_QueryDBaseActionOnDQIs_struct(XDR *,
   struct QueryDBaseActionOnDQIs_struct *);
extern bool_t xdr_QueryDBaseActionOnDQIs(XDR *, QueryDBaseActionOnDQIs *);

struct DQIInformation_struct {
	int Type;
};
typedef struct DQIInformation_struct DQIInformation ;
extern bool_t xdr_DQIInformation_struct(XDR *, struct DQIInformation_struct *);

extern bool_t xdr_DQIInformation(XDR *, DQIInformation *);

struct DQIInformationList_struct {
	int nqtys;
	struct {
		u_int qty_len;
		DQIInformation *qty_val;
	} qty;
};
typedef struct DQIInformationList_struct DQIInformationList ;
extern bool_t xdr_DQIInformationList_struct(XDR *, struct DQIInformationList_struct *);
extern bool_t xdr_DQIInformationList(XDR *, DQIInformationList *);

struct DataBase_struct {
	int index;
	char *Prompt;
};
typedef struct DataBase_struct DataBase ;
extern bool_t xdr_DataBase_struct(XDR *, struct DataBase_struct *);
extern bool_t xdr_DataBase(XDR *, DataBase *);

struct DataBaseList_struct {
	int nqtys;
	struct {
		u_int qty_len;
		DataBase *qty_val;
	} qty;
};
typedef struct DataBaseList_struct DataBaseList ;
extern bool_t xdr_DataBaseList_struct(XDR *, struct DataBaseList_struct *);

extern bool_t xdr_DataBaseList(XDR *, DataBaseList *);

/* -------------------------------------------------------------------- */

/* These structure were added on 97/06/20 to faciltate use of "operations"
 * in "UI".  This will allow "on-the-fly" generation of new SCM modules,
 * needed because the input DQD to an "operation" is random.
 */
/* This is the basic request for a DataQuantityInstance and data assignment
 * to memory:
 */

/* This structure allows SCM to build a ParamUnit based on input
 * from the UI - see SCMLibs/Data.h
 */
struct UItoSCMParamUnit_struct
    {
    String                   Prompt ;
    int                      Type ;
    int                      SubType ;
    String                   Data ;
    };
typedef struct UItoSCMParamUnit_struct UItoSCMParamUnit ;

extern bool_t xdr_UItoSCMParamUnit_struct(XDR *, struct UItoSCMParamUnit_struct *);
extern bool_t xdr_UItoSCMParamUnit(XDR *, UItoSCMParamUnit *);

struct UItoSCMParamUnitList_struct
    {
	int nqtys;
	struct {
		u_int qty_len;
		UItoSCMParamUnit *qty_val;
	} qty;
    };
typedef struct UItoSCMParamUnitList_struct UItoSCMParamUnitList ;

extern bool_t xdr_UItoSCMParamUnitList_struct(XDR *, struct UItoSCMParamUnitList_struct *);
extern bool_t xdr_UItoSCMParamUnitList(XDR *, UItoSCMParamUnitList *);


/* This structure allows SCM to build a DataUnit based on input
 * from the UI - see SCMLibs/Data.h
 */
struct UItoSCMDataUnit_struct
    {
    DataQuantityDescription  DQD ;
    float                    scale ;
    float                    offset ;
    String                   OrigExecute ;
    String                   Execute ;
    String                   ComputeFunction ;
    int                      UseShading ;
    UItoSCMParamUnitList     PList ;
    };
typedef struct UItoSCMDataUnit_struct UItoSCMDataUnit ;

extern bool_t xdr_UItoSCMDataUnit_struct(XDR *, struct UItoSCMDataUnit_struct *);
extern bool_t xdr_UItoSCMDataUnit(XDR *, UItoSCMDataUnit *);

struct UItoSCMDataUnitList_struct
    {
	int nqtys;
	struct {
		u_int qty_len;
		UItoSCMDataUnit *qty_val;
	} qty;
    };
typedef struct UItoSCMDataUnitList_struct UItoSCMDataUnitList ;

extern bool_t xdr_UItoSCMDataUnitList_struct(XDR *, struct UItoSCMDataUnitList_struct *);
extern bool_t xdr_UItoSCMDataUnitList(XDR *, UItoSCMDataUnitList *);


/* --------------------------------------------------------------------- */
extern ParameterReq *SDTConstructParameterReq (char *i_prompt,
    char *i_default, char *i_data, int i_type) ;
extern ParameterReq *SDTCopyConstructParameterReq (ParameterReq *i_prq) ;
extern int SDTFillParameterReq (ParameterReq *i_prq, char *i_prompt,
    char *i_default, char *i_data, int i_type) ;
extern int SDTCopyParameterReq (ParameterReq *in_paramreq,
    ParameterReq *out_paramreq) ;
extern int SDTDestructParameterReq (ParameterReq *i_prq) ;
extern int SDTClearParameterReq (ParameterReq *in_paramreq) ;
extern int SDTPrintParameterReq (ParameterReq *i_prq, FILE *ofp) ;

extern ParameterReqList *SDTConstructParameterReqList ( int nparams,
    char **i_prompt, char **i_default, char **i_data, int *i_type) ;
extern ParameterReqList *SDTCopyConstructParameterReqList (
    ParameterReqList *in_plist) ;
extern int SDTFillParameterReqList (ParameterReqList *i_plist,
    int nparams, char **i_prompt, char **i_default, char **i_data,
    int *i_type) ;
extern int SDTCopyParameterReqList (ParameterReqList *i_plist,
    ParameterReqList *o_plist) ;
extern int SDTDestructParameterReqList (ParameterReqList *i_plist) ;
extern int SDTClearParameterReqList (ParameterReqList *i_plist) ;
extern int SDTArrayFillParameterReqList (int npr, ParameterReq *i_parr,
    ParameterReqList *o_plist) ;
int SDTPtrArrayFillParameterReqList (int npr, ParameterReq **i_parr,
    ParameterReqList *o_plist) ;
extern int SDTPrintParameterReqList (ParameterReqList *in_prlist,
    FILE *ofp) ;

extern ConstructDQIRequest  *SDTConstructConstructDQIRequest (
    DataBaseResponse *in_dbrsp, DataQuantityDescriptionList *in_dlist,
    int memory_type, int rtime, int n_appstr, char **appstr) ;

extern ConstructDQIRequest  *SDTAlternateConstructConstructDQIRequest (
    DataBaseResponse *in_dbrsp,
    int  ndqd, DataQuantityDescription **in_dlist,
    int  memory_type, int rtime, int n_appstr, char **appstr) ;

extern ConstructDQIRequest  *SDTCopyConstructConstructDQIRequest (
    ConstructDQIRequest *in_cdqireq) ;

extern int  SDTFillConstructDQIRequest (ConstructDQIRequest *cdqireq,
    DataBaseResponse *in_dbrsp, DataQuantityDescriptionList *in_dlist,
    int  memory_type, int rtime, int n_appstr, char **appstr) ;

extern int  SDTCopyConstructDQIRequest (ConstructDQIRequest *in_cdqireq,
   ConstructDQIRequest *out_cdqireq) ;

extern int  SDTDestructConstructDQIRequest (ConstructDQIRequest *cdqireq) ;

extern int  SDTClearConstructDQIRequest (ConstructDQIRequest *cdqireq) ;

extern int  SDTPrintConstructDQIRequest (ConstructDQIRequest *cdqireq,
    FILE *ofp) ;

extern ConstructDQIRequestList  *SDTConstructConstructDQIRequestList (
    int ncdqirecs, ConstructDQIRequest **in_cdqireq) ;

extern ConstructDQIRequestList  *SDTCopyConstructConstructDQIRequestList (
    ConstructDQIRequestList *in_cdqireql) ;

extern int  SDTFillConstructDQIRequestList (
    ConstructDQIRequestList *cdqireql,
    int ncdqireqs, ConstructDQIRequest **in_cdqireq) ;

extern int  SDTCopyConstructDQIRequestList (
    ConstructDQIRequestList *in_cdqireql,
    ConstructDQIRequestList *out_cdqireql) ;

extern int  SDTDestructConstructDQIRequestList (
    ConstructDQIRequestList *cdqireql) ;

extern int  SDTClearConstructDQIRequestList (
    ConstructDQIRequestList *cdqireql) ;

extern int  SDTArrayFillConstructDQIRequestList (int ncdqireqs,
    ConstructDQIRequest *in_cdqireq,
    ConstructDQIRequestList *out_cdqireql) ;

extern int  SDTPtrArrayFillConstructDQIRequestList (int ncdqireqs,
    ConstructDQIRequest **in_cdqireq,
    ConstructDQIRequestList *out_cdqireql) ;

extern int  SDTPrintConstructDQIRequestList (
    ConstructDQIRequestList *cdqireql, FILE *ofp) ;

extern UItoSCMParamUnit  *SDTConstructUItoSCMParamUnit (char *in_prompt,
   int in_type, int in_subtype, char *in_data) ;

extern UItoSCMParamUnit  *SDTCopyConstructUItoSCMParamUnit (
    UItoSCMParamUnit *in_utsparamu) ;

extern int  SDTFillUItoSCMParamUnit (UItoSCMParamUnit *utsparamu,
    char *in_prompt, int in_type, int in_subtype, char *in_data) ;

extern int  SDTCopyUItoSCMParamUnit (UItoSCMParamUnit *in_utsparamu,
    UItoSCMParamUnit *out_utsparamu) ;

extern int  SDTDestructUItoSCMParamUnit (UItoSCMParamUnit *utsparamu) ;

extern int  SDTClearUItoSCMParamUnit (UItoSCMParamUnit *utsparamu) ;

extern int  SDTPrintUItoSCMParamUnit (UItoSCMParamUnit *utsparamu,
    FILE *ofp) ;

extern UItoSCMParamUnitList  *SDTConstructUItoSCMParamUnitList (
    int nutsparamu, char **in_prompt, int *in_type,
    int *in_subtype, char **in_data) ;

extern UItoSCMParamUnitList  *SDTCopyConstructUItoSCMParamUnitList (
    UItoSCMParamUnitList *in_utsparul) ;

extern int  SDTFillUItoSCMParamUnitList (UItoSCMParamUnitList *utsparul,
    int nutsparamu, char **in_prompt, int *in_type,
    int *in_subtype, char **in_data) ;

extern int  SDTCopyUItoSCMParamUnitList (UItoSCMParamUnitList *in_utsparul,
    UItoSCMParamUnitList *out_utsparul) ;

extern int  SDTDestructUItoSCMParamUnitList (
    UItoSCMParamUnitList *utsparul) ;

extern int  SDTClearUItoSCMParamUnitList (UItoSCMParamUnitList *utsparul) ;

extern int  SDTArrayFillUItoSCMParamUnitList (int nutsparamu,
    UItoSCMParamUnit *in_utsparamu,
    UItoSCMParamUnitList *out_utsparul) ;

extern int  SDTPtrArrayFillUItoSCMParamUnitList (int nutsparamu,
    UItoSCMParamUnit **in_utsparamu,
    UItoSCMParamUnitList *out_utsparul) ;

extern int  SDTPrintUItoSCMParamUnitList (UItoSCMParamUnitList *utsparul,
    FILE *ofp) ;

extern UItoSCMDataUnit *SDTConstructUItoSCMDataUnit (
    DataQuantityDescription *in_dqd, float in_scale, float in_offset,
    char *in_oexec, char *in_exec, char *in_cfunc, int in_ushade,
    UItoSCMParamUnitList *in_plist) ;

extern UItoSCMDataUnit  *SDTCopyConstructUItoSCMDataUnit (
    UItoSCMDataUnit *in_utsdatau) ;

extern int  SDTFillUItoSCMDataUnit (UItoSCMDataUnit *utsdatau,
    DataQuantityDescription *in_dqd, float in_scale, float in_offset,
    char *in_oexec, char *in_exec, char *in_cfunc, int in_ushade,
    UItoSCMParamUnitList *in_plist) ;

extern int  SDTCopyUItoSCMDataUnit (UItoSCMDataUnit *in_utsdatau,
    UItoSCMDataUnit *out_utsdatau) ;

extern int  SDTDestructUItoSCMDataUnit (UItoSCMDataUnit *utsdatau) ;

extern int  SDTClearUItoSCMDataUnit (UItoSCMDataUnit *utsdatau) ;

extern int  SDTPrintUItoSCMDataUnit (UItoSCMDataUnit *utsdatau,
    FILE *ofp) ;

extern UItoSCMDataUnitList  *SDTConstructUItoSCMDataUnitList (
    int nutsdatau, DataQuantityDescription **in_dqd, float *in_scale,
    float *in_offset, char **in_oexec, char **in_exec, char **in_cfunc,
    int *in_ushade, UItoSCMParamUnitList **in_plist) ;

extern UItoSCMDataUnitList  *SDTCopyConstructUItoSCMDataUnitList (
    UItoSCMDataUnitList *in_utsdatal) ;

extern int  SDTFillUItoSCMDataUnitList (UItoSCMDataUnitList *utsdatal,
    int nutsdatau, DataQuantityDescription **in_dqd, float *in_scale,
    float *in_offset, char **in_oexec, char **in_exec, char **in_cfunc,
    int *in_ushade, UItoSCMParamUnitList **in_plist) ;

extern int  SDTCopyUItoSCMDataUnitList (UItoSCMDataUnitList *in_utsdatal,
    UItoSCMDataUnitList *out_utsdatal) ;

extern int  SDTDestructUItoSCMDataUnitList (
    UItoSCMDataUnitList *utsdatal) ;

extern int  SDTClearUItoSCMDataUnitList (UItoSCMDataUnitList *utsdatal) ;

extern int  SDTArrayFillUItoSCMDataUnitList (int nutsdatau,
    UItoSCMDataUnit *in_utsdatau, UItoSCMDataUnitList *out_utsdatal) ;

extern int  SDTPtrArrayFillUItoSCMDataUnitList (int nutsdatau,
    UItoSCMDataUnit **in_utsdatau, UItoSCMDataUnitList *out_utsdatal) ;

extern int  SDTPrintUItoSCMDataUnitList (UItoSCMDataUnitList *utsdatal,
    FILE *ofp) ;

extern DqdParameterUsage  *SDTConstructDqdParameterUsage (
    char *in_dqdname, int32 src, int nparams, ParameterReq *plist) ;

extern DqdParameterUsage  *SDTCopyConstructDqdParameterUsage (
    DqdParameterUsage *in_dqdpuse) ;

extern int  SDTFillDqdParameterUsage (DqdParameterUsage *dqdpuse,
    char *in_dqdname, int32 src, int nparams, ParameterReq *plist) ;

extern int  SDTCopyDqdParameterUsage (DqdParameterUsage *in_dqdpuse,
    DqdParameterUsage *out_dqdpuse) ;

extern int  SDTDestructDqdParameterUsage (DqdParameterUsage *dqdpuse) ;

extern int  SDTClearDqdParameterUsage (DqdParameterUsage *dqdpuse) ;

extern int  SDTPrintDqdParameterUsage (DqdParameterUsage *dqdpuse,
    FILE *ofp) ;

extern DqdParameterUsageList  *SDTConstructDqdParameterUsageList (
    int ndqdpuse, char **DqdNames, int single_source, int32 *source_id,
    ParameterReqList *plists) ;

extern DqdParameterUsageList  *SDTCopyConstructDqdParameterUsageList (
    DqdParameterUsageList *in_dqdpusel) ;

extern int  SDTFillDqdParameterUsageList (
    DqdParameterUsageList *dqdpusel, int ndqdpuse, char **DqdNames,
    int single_source, int32 *source_id, ParameterReqList *plists) ;

extern int  SDTCopyDqdParameterUsageList (
    DqdParameterUsageList *in_dqdpusel,
    DqdParameterUsageList *out_dqdpusel) ;

extern int  SDTDestructDqdParameterUsageList (
    DqdParameterUsageList *dqdpusel) ;

extern int  SDTClearDqdParameterUsageList (
    DqdParameterUsageList *dqdpusel) ;

extern int  SDTArrayFillDqdParameterUsageList (int ndqdpuse,
   DqdParameterUsage *in_dqdpuse, DqdParameterUsageList *out_dqdpusel) ;

extern int  SDTPtrArrayFillDqdParameterUsageList (int ndqdpuse,
    DqdParameterUsage **in_dqdpuse,
    DqdParameterUsageList *out_dqdpusel) ;

extern int SDTPrintDqdParameterUsageList (
    DqdParameterUsageList *dqdpusel, FILE *ofp) ;

extern int SDTAppendFromDqdParameterList (DqdParameterUsageList *dqdpusel,
    ParameterReqList **plistp, int *nappended) ;

/* --------------------------------------------------------------------- */

#ifndef SUNOS4
#ifdef __cplusplus
}
#endif
#endif

#endif /* SDTSOURCEDESCRIPTION_H */
